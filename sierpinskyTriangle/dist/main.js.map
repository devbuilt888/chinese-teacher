{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/fractals/chaos-game/ChaosGameBase.ts","webpack:///./src/fractals/mathematical/MathFractalBase.ts","webpack:///./src/fractals/Complex.ts","webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///./node_modules/css-loader/dist/runtime/cssWithMappingToString.js","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./styles/main.css","webpack:///./styles/components.css","webpack:///./src/fractals/chaos-game/TriangleFractal.ts","webpack:///./src/fractals/FractalBase.ts","webpack:///./src/fractals/chaos-game/RestrictedSquareFractal.ts","webpack:///./src/fractals/chaos-game/NonRepeatSquareFractal.ts","webpack:///./src/fractals/chaos-game/ModifiedSquareFractal.ts","webpack:///./src/fractals/chaos-game/AdjacentRestrictionFractal.ts","webpack:///./src/fractals/chaos-game/SierpinskiCarpet.ts","webpack:///./src/fractals/chaos-game/PentagonFractal.ts","webpack:///./src/fractals/chaos-game/FernFractal.ts","webpack:///./src/components/FractalCardFactory.ts","webpack:///./src/components/FractalControlConfig.ts","webpack:///./src/fractals/mathematical/MandelbrotFractal.ts","webpack:///./src/fractals/mathematical/JuliaFractal.ts","webpack:///./src/fractals/mathematical/BurningShipFractal.ts","webpack:///./src/fractals/mathematical/NewtonFractal.ts","webpack:///./src/fractals/mathematical/LyapunovFractal.ts","webpack:///./src/fractals/mathematical/PhoenixFractal.ts","webpack:///./src/fractals/mathematical/KochSnowflakeFractal.ts","webpack:///./index.ts","webpack:///./styles/main.css?42e1","webpack:///./styles/components.css?a6dc","webpack:///./src/components/Dashboard.ts","webpack:///./src/components/FractalSection.ts","webpack:///./src/fractals/chaos-game/ChaosGameModule.ts","webpack:///./src/services/NavigationService.ts","webpack:///./src/fractals/mathematical/MathFractalModule.ts","webpack:///./src/fractals/mathematical/SierpinskiTriangleFractal.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","canvasId","iterations","iterationsCount","colorPalette","initialize","this","startingPoint","canvas","width","height","setIterations","generate","plot","point","size","x","y","currentColor","Math","floor","random","length","ctx","fillStyle","fillRect","midpoint","p1","p2","FractalBase","ChaosGameBase","maxIterations","zoom","centerX","centerY","colorMode","setMaxIterations","setZoom","setCenter","getColor","smooth","hue","log2","colorIndex","mapToComplex","aspectRatio","scale","min","real","imag","Complex","hslToRgb","h","g","b","hue2rgb","q","setPixelDirectColor","data","idx","MathFractalBase","copy","add","other","subtract","multiply","square","abs","sqrt","pow","theta","atan2","cos","sin","conjugate","divide","denominator","exp","z","exp_real","toString","sign","absImag","memo","isOldIE","Boolean","window","document","all","atob","getTarget","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","stylesInDom","getIndexByIdentifier","identifier","result","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","index","obj","css","media","sourceMap","references","updater","push","addStyle","insertStyleElement","style","createElement","attributes","nonce","keys","forEach","setAttribute","insert","Error","appendChild","textStore","replaceText","replacement","filter","join","applyToSingletonTag","remove","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","applyToTag","removeAttribute","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","singleton","singletonCounter","update","styleIndex","parentNode","removeStyleElement","newObj","lastIdentifiers","newList","newLastIdentifiers","_i","_index","splice","_slicedToArray","arr","Array","isArray","_arrayWithHoles","iterator","_s","_e","_arr","_n","_d","next","done","err","_iterableToArrayLimit","minLen","_arrayLikeToArray","slice","constructor","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","_item","content","cssMapping","base64","sourceMapping","sourceURLs","sources","map","source","sourceRoot","cssWithMappingToString","mediaQuery","dedupe","alreadyImportedModules","___CSS_LOADER_EXPORT___","animationId","isAnimating","points","w","clear","animate","speed","stopAnimation","animateGeneration","currentPoint","randomIndex","targetPoint","pointsPerFrame","step","requestAnimationFrame","cancelAnimationFrame","isCurrentlyAnimating","getInfo","title","description","formula","TriangleFractal","getElementById","context","getContext","clearRect","previousVertex","restrictions","0","1","2","3","RestrictedSquareFractal","vertices","vertex","beginPath","arc","PI","fill","prevIndex","rect","NonRepeatSquareFractal","padding","rate","pointSize","ModifiedSquareFractal","lastVertexIndex","vertexCount","animationStep","contractionRatio","radius","angle","strokeStyle","lineWidth","moveTo","lineTo","closePath","stroke","setColorScheme","colorScheme","setContractionRatio","ratio","max","moveTowardsTarget","batchSize","generatePoints","animateStep","vertexIndex","selectedVertex","AdjacentRestrictionFractal","SierpinskiCarpet","pentagonPoints","color","PentagonFractal","transformations","prob","a","f","transform","tx","getRandomTransformation","sumProb","offsetX","offsetY","canvasX","canvasY","FernFractal","controlConfigs","container","fractal","card","className","header","titleElement","textContent","canvasContainer","controlsContainer","config","controlGroup","label","htmlFor","input","defaultValue","undefined","type","addEventListener","parseFloat","onChange","tooltip","display","descriptionElement","formulaContainer","formulaTitle","formulaElement","copyFormulaBtn","innerHTML","copySuccess","stopPropagation","navigator","clipboard","writeText","then","classList","setTimeout","console","error","closest","editorButton","fractalId","toLowerCase","replace","navigateToFractalEditor","callback","imageData","createImageData","saturation","lightness","round","putImageData","MandelbrotFractal","juliaConstant","setParameters","JuliaFractal","absRe","absIm","normalized","BurningShipFractal","power","setPower","roots","rootIndex","numerator","fraction","newZ","minDist","Infinity","dist","NewtonFractal","sequence","setSequence","toUpperCase","lyapunov","calculateLyapunovExponent","isNaN","intensity","rValues","warmup","NaN","sum","derivative","log","LyapunovFractal","setParameter","zPrev","zTemp","log_zn","PhoenixFractal","depth","needsRedraw","setSize","drawKochCurve","x1","y1","x2","y2","dx","dy","x3","y3","x4","y4","xMiddle","yMiddle","triangleHeight","KochSnowflakeFractal","initRestrictedSquareFractal","initSierpinskiTriangle","initMandelbrotSet","initAdjacentRestrictionFractal","initModifiedSquareFractal","initNonRepeatSquareFractal","initSierpinskiCarpet","initPentagonFractal","initFernFractal","initKochSnowflake","initPhoenixFractal","initFractalPage","fractalType","particlesJS","initDashboard","locals","dashboard","headerContent","subtitle","decorLine","createHeader","chaosGameContainer","createFractalSection","body","gridOverlay","mathFractalContainer","footer","footerLine","footerContent","footerText","createFooter","corner","decoration","createCornerDecorations","initChaosGameFractals","initMathFractals","section","sectionHeader","sectionTitle","grid","controls","createIterationsControl","createFractalCard","initTriangleFractal","createSliderControl","editorUrl","open","createMaxIterationsControl","createZoomControl","initMandelbrotFractal","createComplexParamControl","initJuliaFractal","initBurningShipFractal","initNewtonFractal","initLyapunovFractal","SierpinskiTriangleFractal","setDepth","initSierpinskiTriangleFractal","initKochSnowflakeFractal","maxDepth","drawTriangle","p3","fillColor","sierpinski","p12","p23","p31","halfSize","height30"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","import { FractalBase } from '../FractalBase';\n\n/**\n * Type for representing a 2D point\n */\nexport type Point = [number, number];\n\n/**\n * Base class for chaos game fractals\n */\nexport abstract class ChaosGameBase extends FractalBase {\n    protected iterationsCount: number;\n    protected startingPoint: Point;\n    protected colorPalette: string[];\n    \n    /**\n     * Constructor for the chaos game fractal base class\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param iterations - The number of iterations to perform\n     */\n    constructor(canvasId: string, iterations: number = 10000) {\n        super(canvasId);\n        this.iterationsCount = iterations;\n        this.colorPalette = [\"#0ff\", \"#f0f\", \"#0f0\"];\n    }\n    \n    /**\n     * Initialize the fractal\n     * Override parent method to add setup specific to chaos game fractals\n     */\n    public initialize(): void {\n        super.initialize();\n        \n        // Set the starting point to center of canvas\n        this.startingPoint = [this.canvas.width / 2, this.canvas.height / 2];\n    }\n    \n    /**\n     * Sets the number of iterations for the fractal\n     */\n    public setIterations(iterations: number): void {\n        this.iterationsCount = iterations;\n        this.generate();\n    }\n    \n    /**\n     * Plots a point on the canvas\n     */\n    protected plot(point: Point, size: number = 1): void {\n        const [x, y] = point;\n        const currentColor = Math.floor(Math.random() * this.colorPalette.length);\n        this.ctx.fillStyle = this.colorPalette[currentColor];\n        this.ctx.fillRect(x - size/2, y - size/2, size, size);\n    }\n    \n    /**\n     * Calculates the midpoint between two points\n     */\n    protected midpoint(p1: Point, p2: Point): Point {\n        return [\n            (p1[0] + p2[0]) / 2,\n            (p1[1] + p2[1]) / 2\n        ];\n    }\n} ","import { FractalBase } from '../FractalBase';\r\nimport { Complex } from '../Complex';\r\n\r\n/**\r\n * Base class for mathematical fractals\r\n */\r\nexport abstract class MathFractalBase extends FractalBase {\r\n    protected maxIterations: number = 100;\r\n    protected zoom: number = 1.0;\r\n    protected centerX: number = 0;\r\n    protected centerY: number = 0;\r\n    protected colorMode: string = 'smooth'; // 'smooth' or 'discrete'\r\n    protected colorPalette: string[];\r\n    \r\n    /**\r\n     * Constructor for the mathematical fractal base class\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param maxIterations - The maximum number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, maxIterations: number = 100) {\r\n        super(canvasId);\r\n        this.maxIterations = maxIterations;\r\n        this.colorPalette = [\r\n            '#ff0000', '#ff7f00', '#ffff00', '#00ff00', \r\n            '#0000ff', '#4b0082', '#8f00ff', '#ff00ff'\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Sets the maximum iterations for the fractal\r\n     */\r\n    public setMaxIterations(iterations: number): void {\r\n        this.maxIterations = iterations;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Sets the zoom level for the fractal\r\n     */\r\n    public setZoom(zoom: number): void {\r\n        this.zoom = zoom;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Sets the center point for the fractal\r\n     */\r\n    public setCenter(x: number, y: number): void {\r\n        this.centerX = x;\r\n        this.centerY = y;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Gets the color for a point based on iteration count\r\n     */\r\n    protected getColor(iterations: number, maxIterations: number, smooth: number = 0): string {\r\n        if (iterations === maxIterations) {\r\n            return '#000000'; // Black for points in the set\r\n        }\r\n        \r\n        if (this.colorMode === 'smooth') {\r\n            // Smooth coloring formula\r\n            let hue = 360 * (iterations + 1 - Math.log2(Math.log2(smooth))) / maxIterations;\r\n            hue = hue % 360;\r\n            return `hsl(${hue}, 100%, 50%)`;\r\n        } else {\r\n            // Discrete coloring\r\n            const colorIndex = iterations % this.colorPalette.length;\r\n            return this.colorPalette[colorIndex];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Maps a canvas coordinate to a complex plane point\r\n     */\r\n    protected mapToComplex(x: number, y: number): Complex {\r\n        if (!this.canvas) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        \r\n        // Aspect ratio correction\r\n        const aspectRatio = width / height;\r\n        const scale = 2.0 / (this.zoom * Math.min(width, height));\r\n        \r\n        const real = (x - width / 2) * scale * aspectRatio + this.centerX;\r\n        const imag = (y - height / 2) * scale + this.centerY;\r\n        \r\n        return new Complex(real, imag);\r\n    }\r\n    \r\n    /**\r\n     * Helper function to convert HSL to RGB\r\n     */\r\n    protected hslToRgb(h: number, s: number, l: number): [number, number, number] {\r\n        let r, g, b;\r\n        \r\n        if (s === 0) {\r\n            r = g = b = l; // Achromatic\r\n        } else {\r\n            const hue2rgb = (p: number, q: number, t: number): number => {\r\n                if (t < 0) t += 1;\r\n                if (t > 1) t -= 1;\r\n                if (t < 1/6) return p + (q - p) * 6 * t;\r\n                if (t < 1/2) return q;\r\n                if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n                return p;\r\n            };\r\n            \r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n            \r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n        \r\n        return [r, g, b];\r\n    }\r\n    \r\n    /**\r\n     * Helper function to set pixel color directly in image data\r\n     */\r\n    protected setPixelDirectColor(\r\n        data: Uint8ClampedArray, \r\n        x: number, \r\n        y: number, \r\n        width: number, \r\n        r: number, \r\n        g: number, \r\n        b: number\r\n    ): void {\r\n        const idx = (y * width + x) * 4;\r\n        data[idx] = r;\r\n        data[idx + 1] = g;\r\n        data[idx + 2] = b;\r\n        data[idx + 3] = 255; // Alpha\r\n    }\r\n} ","/**\r\n * Complex number implementation for mathematical fractals\r\n */\r\nexport class Complex {\r\n    public real: number;\r\n    public imag: number;\r\n    \r\n    constructor(real: number, imag: number) {\r\n        this.real = real;\r\n        this.imag = imag;\r\n    }\r\n    \r\n    /**\r\n     * Creates a copy of this complex number\r\n     */\r\n    public copy(): Complex {\r\n        return new Complex(this.real, this.imag);\r\n    }\r\n    \r\n    /**\r\n     * Adds another complex number to this one\r\n     */\r\n    public add(other: Complex): Complex {\r\n        return new Complex(\r\n            this.real + other.real,\r\n            this.imag + other.imag\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Subtracts another complex number from this one\r\n     */\r\n    public subtract(other: Complex): Complex {\r\n        return new Complex(\r\n            this.real - other.real,\r\n            this.imag - other.imag\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Multiplies this complex number by another\r\n     */\r\n    public multiply(other: Complex): Complex {\r\n        return new Complex(\r\n            this.real * other.real - this.imag * other.imag,\r\n            this.real * other.imag + this.imag * other.real\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Squares this complex number (z^2)\r\n     */\r\n    public square(): Complex {\r\n        return new Complex(\r\n            this.real * this.real - this.imag * this.imag,\r\n            2 * this.real * this.imag\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Returns the absolute value (magnitude) of this complex number\r\n     */\r\n    public abs(): number {\r\n        return Math.sqrt(this.real * this.real + this.imag * this.imag);\r\n    }\r\n    \r\n    /**\r\n     * Raises this complex number to a power\r\n     */\r\n    public pow(n: number): Complex {\r\n        let r = Math.pow(this.abs(), n);\r\n        let theta = Math.atan2(this.imag, this.real) * n;\r\n        return new Complex(r * Math.cos(theta), r * Math.sin(theta));\r\n    }\r\n    \r\n    /**\r\n     * Returns the complex conjugate\r\n     */\r\n    public conjugate(): Complex {\r\n        return new Complex(this.real, -this.imag);\r\n    }\r\n    \r\n    /**\r\n     * Divides this complex number by another\r\n     */\r\n    public divide(other: Complex): Complex {\r\n        const denominator = other.real * other.real + other.imag * other.imag;\r\n        return new Complex(\r\n            (this.real * other.real + this.imag * other.imag) / denominator,\r\n            (this.imag * other.real - this.real * other.imag) / denominator\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Creates a complex number from exponential function\r\n     */\r\n    public static exp(z: Complex): Complex {\r\n        const exp_real = Math.exp(z.real);\r\n        return new Complex(\r\n            exp_real * Math.cos(z.imag),\r\n            exp_real * Math.sin(z.imag)\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Creates a string representation of this complex number\r\n     */\r\n    public toString(): string {\r\n        if (this.imag === 0) {\r\n            return this.real.toString();\r\n        } else if (this.real === 0) {\r\n            return this.imag === 1 ? 'i' : this.imag === -1 ? '-i' : `${this.imag}i`;\r\n        } else {\r\n            const sign = this.imag < 0 ? '-' : '+';\r\n            const absImag = Math.abs(this.imag);\r\n            return `${this.real} ${sign} ${absImag === 1 ? '' : absImag}i`;\r\n        }\r\n    }\r\n} ","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.push([module.id, \"@import url(https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap);\"]);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/**\\n * Main styles for the Fractal Explorer Dashboard\\n */\\n\\n:root {\\n    --primary: #4F46E5;\\n    --primary-hover: #4338CA;\\n    --primary-active: #3730A3;\\n    --secondary: #8B5CF6;\\n    --accent: #EC4899;\\n    --background: #0F172A;\\n    --card-bg: #1E293B;\\n    --card-hover: #182341;\\n    --panel-bg: rgba(23, 37, 64, 0.7);\\n    --text-primary: #F8FAFC;\\n    --text-secondary: #CBD5E1;\\n    --text-tertiary: #64748B;\\n    --border-light: rgba(100, 116, 139, 0.2);\\n    --border-medium: rgba(100, 116, 139, 0.3);\\n    --surface-1: #162036;\\n    --surface-2: #1E293B;\\n    --success: #10B981;\\n    --gradient-1: linear-gradient(110deg, #4F46E5, #8B5CF6, #48ecc9, #48ecc9, #48ecc9, #48ecc9);\\n    --gradient-2: linear-gradient(135deg, #0EA5E9, #8B5CF6);\\n    --gradient-subtle: linear-gradient(170deg, rgba(79, 70, 229, 0.1) 0%, rgba(236, 72, 153, 0.1) 100%);\\n    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.2);\\n    --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.25);\\n    --shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.3);\\n    --glow-primary: 0 0 20px rgba(79, 70, 229, 0.5);\\n    \\n    --ease-spring: cubic-bezier(0.2, 0.8, 0.2, 1);\\n    --ease-out: cubic-bezier(0.2, 0, 0, 1);\\n    --ease-in: cubic-bezier(0.4, 0, 1, 1);\\n}\\n\\n*, *::before, *::after {\\n    box-sizing: border-box;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\nhtml {\\n    font-size: 16px;\\n}\\n\\nbody {\\n    background-color: var(--background);\\n    background-image: \\n        radial-gradient(circle at 20% 35%, rgba(79, 70, 229, 0.15) 0%, transparent 40%),\\n        radial-gradient(circle at 75% 80%, rgba(236, 72, 153, 0.1) 0%, transparent 30%);\\n    background-attachment: fixed;\\n    color: var(--text-primary);\\n    font-family: 'Manrope', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\\n    margin: 0;\\n    padding: 0;\\n    line-height: 1.5;\\n    min-height: 100vh;\\n    font-weight: 400;\\n    letter-spacing: -0.015em;\\n    overflow-x: hidden;\\n}\\n\\n/* Glassmorphism effects */\\n.glassmorphism {\\n    background: var(--panel-bg);\\n    backdrop-filter: blur(10px);\\n    -webkit-backdrop-filter: blur(10px);\\n    border: 1px solid var(--border-light);\\n}\\n\\nheader {\\n    position: relative;\\n    padding: 3rem 0 5rem;\\n    margin-bottom: 2rem;\\n    overflow: hidden;\\n    isolation: isolate;\\n}\\n\\nheader::before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    top: 0;\\n    left: 0;\\n    background-image: linear-gradient(110deg, #4F46E5, #8B5CF6, #48ecc9, #48ecc9, #48ecc9, #48ecc9);\\n    opacity: 0.5;\\n    z-index: -1;\\n}\\n\\nheader::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 100%;\\n    height: 70px;\\n    bottom: -1px;\\n    left: 0;\\n    background-image: linear-gradient(to top, var(--background), transparent);\\n    z-index: -1;\\n}\\n\\nh1, h2, h3 {\\n    font-weight: 700;\\n    letter-spacing: -0.025em;\\n}\\n\\nh1 {\\n    font-size: 3.5rem;\\n    background: linear-gradient(to right, #fff, #cbd5e1);\\n    -webkit-background-clip: text;\\n    background-clip: text;\\n    color: transparent;\\n    margin: 0;\\n    text-align: center;\\n    animation: fadeUp 1s var(--ease-out) forwards;\\n}\\n\\n@keyframes fadeUp {\\n    from {\\n        opacity: 0;\\n        transform: translateY(20px);\\n    }\\n    to {\\n        opacity: 1;\\n        transform: translateY(0);\\n    }\\n}\\n\\nh2 {\\n    font-size: 1.8rem;\\n    color: var(--text-primary);\\n    margin-bottom: 1.5rem;\\n    position: relative;\\n    display: inline-block;\\n    animation: fadeIn 0.8s var(--ease-out) forwards;\\n}\\n\\n@keyframes fadeIn {\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n}\\n\\nh2::after {\\n    content: '';\\n    position: absolute;\\n    width: 60px;\\n    height: 3px;\\n    background: var(--gradient-2);\\n    bottom: -8px;\\n    left: 0;\\n    border-radius: 3px;\\n    transition: width 0.3s var(--ease-out);\\n}\\n\\nh2:hover::after {\\n    width: 100%;\\n    background: var(--gradient-1);\\n}\\n\\n.container {\\n    max-width: 1280px;\\n    margin: 0 auto;\\n    padding: 0 2rem;\\n}\\n\\n.dashboard {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 3rem;\\n    padding-bottom: 4rem;\\n    position: relative;\\n}\\n\\n.fractal-section {\\n    margin-bottom: 2rem;\\n    animation: slideUpFade 0.7s var(--ease-spring) both;\\n}\\n\\n@keyframes slideUpFade {\\n    from {\\n        opacity: 0;\\n        transform: translateY(40px);\\n    }\\n    to {\\n        opacity: 1;\\n        transform: translateY(0);\\n    }\\n}\\n\\n.section-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 2rem;\\n}\\n\\n.fractal-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\\n    gap: 2rem;\\n    perspective: 1000px;\\n}\\n\\n.fractal-card {\\n    background-color: var(--card-bg);\\n    border-radius: 16px;\\n    overflow: hidden;\\n    transition: transform 0.5s var(--ease-spring), \\n                box-shadow 0.4s var(--ease-out), \\n                background-color 0.3s var(--ease-out);\\n    border: 1px solid var(--border-light);\\n    transform-origin: center bottom;\\n    position: relative;\\n    isolation: isolate;\\n    animation: floatUp 5s ease-in-out infinite;\\n}\\n\\n@keyframes floatUp {\\n    0% { transform: translateY(0px); }\\n    50% { transform: translateY(-15px); }\\n    100% { transform: translateY(0px); }\\n}\\n\\n.fractal-card:nth-child(2n) {\\n    animation-delay: 0.5s;\\n}\\n\\n.fractal-card:nth-child(3n) {\\n    animation-delay: 1s;\\n}\\n\\n.fractal-card:nth-child(4n) {\\n    animation-delay: 0.3s;\\n}\\n\\n.card-header {\\n    padding: 1.25rem 1.5rem;\\n    background-color: rgba(0, 0, 0, 0.2);\\n    border-bottom: 1px solid var(--border-light);\\n    position: relative;\\n}\\n\\n.card-header h3 {\\n    margin: 0;\\n    font-size: 1.1rem;\\n    color: var(--text-primary);\\n}\\n\\n.card-header::after {\\n    content: '';\\n    position: absolute;\\n    left: 0;\\n    bottom: -1px;\\n    width: 0;\\n    height: 1px;\\n    background: var(--gradient-2);\\n    transition: width 0.3s var(--ease-out);\\n}\\n\\n.fractal-card:hover .card-header::after {\\n    width: 100%;\\n}\\n\\ncanvas {\\n    width: 100%;\\n    height: 250px;\\n    display: block;\\n    background-color: rgba(0, 0, 0, 0.3);\\n    transition: transform 0.3s var(--ease-out), filter 0.3s var(--ease-out);\\n}\\n\\n.fractal-card:hover canvas {\\n    filter: brightness(1.1) contrast(1.05);\\n}\\n\\n.fractal-controls {\\n    padding: 1.25rem 1.5rem;\\n    border-top: 1px solid var(--border-light);\\n    transition: background-color 0.3s;\\n}\\n\\n.control-group {\\n    margin-bottom: 1rem;\\n    transition: transform 0.2s var(--ease-out);\\n}\\n\\n.fractal-card:hover .control-group {\\n    transform: translateY(-3px);\\n}\\n\\n.control-group:last-child {\\n    margin-bottom: 1.25rem;\\n}\\n\\n.header-content {\\n    max-width: 800px;\\n    margin: 0 auto;\\n    text-align: center;\\n    position: relative;\\n    z-index: 2;\\n}\\n\\n.subtitle {\\n    font-size: 1.2rem;\\n    opacity: 0.9;\\n    margin-top: 1.5rem;\\n}\\n\\n.header-decoration {\\n    width: 100%;\\n    max-width: 500px;\\n    height: 2px;\\n    background: var(--accent);\\n    margin: 1.5rem auto;\\n    position: relative;\\n    overflow: hidden;\\n    opacity: 0.6;\\n}\\n\\n.grid-overlay {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-image: linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),\\n                    linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);\\n    background-size: 40px 40px;\\n    z-index: -1;\\n    opacity: 0.4;\\n    pointer-events: none;\\n}\\n\\n.corner-decoration {\\n    position: fixed;\\n    width: 200px;\\n    height: 200px;\\n    z-index: -1;\\n    opacity: 0.2;\\n    pointer-events: none;\\n}\\n\\n.corner-top-left {\\n    top: 0;\\n    left: 0;\\n    border-top: 2px solid var(--accent);\\n    border-left: 2px solid var(--accent);\\n    border-top-left-radius: 12px;\\n}\\n\\n.corner-top-right {\\n    top: 0;\\n    right: 0;\\n    border-top: 2px solid var(--secondary);\\n    border-right: 2px solid var(--secondary);\\n    border-top-right-radius: 12px;\\n}\\n\\n.corner-bottom-left {\\n    bottom: 0;\\n    left: 0;\\n    border-bottom: 2px solid var(--secondary);\\n    border-left: 2px solid var(--secondary);\\n    border-bottom-left-radius: 12px;\\n}\\n\\n.corner-bottom-right {\\n    bottom: 0;\\n    right: 0;\\n    border-bottom: 2px solid var(--accent);\\n    border-right: 2px solid var(--accent);\\n    border-bottom-right-radius: 12px;\\n}\\n\\n.highlight {\\n    color: var(--accent);\\n    font-weight: 600;\\n    position: relative;\\n    z-index: 1;\\n}\\n\\n.footer {\\n    padding: 3rem 0;\\n    margin-top: 2rem;\\n    text-align: center;\\n    color: var(--text-secondary);\\n    position: relative;\\n}\\n\\n.footer-line {\\n    height: 1px;\\n    width: 100%;\\n    background: linear-gradient(to right, transparent, var(--border-light), transparent);\\n    margin-bottom: 2rem;\\n}\\n\\n@media (max-width: 768px) {\\n    .fractal-grid {\\n        grid-template-columns: 1fr;\\n    }\\n    \\n    h1 {\\n        font-size: 2.25rem;\\n    }\\n    \\n    h2 {\\n        font-size: 1.5rem;\\n    }\\n    \\n    header {\\n        padding: 2rem 0 4rem;\\n    }\\n    \\n    .container {\\n        padding: 0 1.25rem;\\n    }\\n} \", \"\",{\"version\":3,\"sources\":[\"webpack://./styles/main.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Main styles for the Fractal Explorer Dashboard\\n */\\n\\n@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap');\\n\\n:root {\\n    --primary: #4F46E5;\\n    --primary-hover: #4338CA;\\n    --primary-active: #3730A3;\\n    --secondary: #8B5CF6;\\n    --accent: #EC4899;\\n    --background: #0F172A;\\n    --card-bg: #1E293B;\\n    --card-hover: #182341;\\n    --panel-bg: rgba(23, 37, 64, 0.7);\\n    --text-primary: #F8FAFC;\\n    --text-secondary: #CBD5E1;\\n    --text-tertiary: #64748B;\\n    --border-light: rgba(100, 116, 139, 0.2);\\n    --border-medium: rgba(100, 116, 139, 0.3);\\n    --surface-1: #162036;\\n    --surface-2: #1E293B;\\n    --success: #10B981;\\n    --gradient-1: linear-gradient(110deg, #4F46E5, #8B5CF6, #48ecc9, #48ecc9, #48ecc9, #48ecc9);\\n    --gradient-2: linear-gradient(135deg, #0EA5E9, #8B5CF6);\\n    --gradient-subtle: linear-gradient(170deg, rgba(79, 70, 229, 0.1) 0%, rgba(236, 72, 153, 0.1) 100%);\\n    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.2);\\n    --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.25);\\n    --shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.3);\\n    --glow-primary: 0 0 20px rgba(79, 70, 229, 0.5);\\n    \\n    --ease-spring: cubic-bezier(0.2, 0.8, 0.2, 1);\\n    --ease-out: cubic-bezier(0.2, 0, 0, 1);\\n    --ease-in: cubic-bezier(0.4, 0, 1, 1);\\n}\\n\\n*, *::before, *::after {\\n    box-sizing: border-box;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\nhtml {\\n    font-size: 16px;\\n}\\n\\nbody {\\n    background-color: var(--background);\\n    background-image: \\n        radial-gradient(circle at 20% 35%, rgba(79, 70, 229, 0.15) 0%, transparent 40%),\\n        radial-gradient(circle at 75% 80%, rgba(236, 72, 153, 0.1) 0%, transparent 30%);\\n    background-attachment: fixed;\\n    color: var(--text-primary);\\n    font-family: 'Manrope', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\\n    margin: 0;\\n    padding: 0;\\n    line-height: 1.5;\\n    min-height: 100vh;\\n    font-weight: 400;\\n    letter-spacing: -0.015em;\\n    overflow-x: hidden;\\n}\\n\\n/* Glassmorphism effects */\\n.glassmorphism {\\n    background: var(--panel-bg);\\n    backdrop-filter: blur(10px);\\n    -webkit-backdrop-filter: blur(10px);\\n    border: 1px solid var(--border-light);\\n}\\n\\nheader {\\n    position: relative;\\n    padding: 3rem 0 5rem;\\n    margin-bottom: 2rem;\\n    overflow: hidden;\\n    isolation: isolate;\\n}\\n\\nheader::before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    top: 0;\\n    left: 0;\\n    background-image: linear-gradient(110deg, #4F46E5, #8B5CF6, #48ecc9, #48ecc9, #48ecc9, #48ecc9);\\n    opacity: 0.5;\\n    z-index: -1;\\n}\\n\\nheader::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 100%;\\n    height: 70px;\\n    bottom: -1px;\\n    left: 0;\\n    background-image: linear-gradient(to top, var(--background), transparent);\\n    z-index: -1;\\n}\\n\\nh1, h2, h3 {\\n    font-weight: 700;\\n    letter-spacing: -0.025em;\\n}\\n\\nh1 {\\n    font-size: 3.5rem;\\n    background: linear-gradient(to right, #fff, #cbd5e1);\\n    -webkit-background-clip: text;\\n    background-clip: text;\\n    color: transparent;\\n    margin: 0;\\n    text-align: center;\\n    animation: fadeUp 1s var(--ease-out) forwards;\\n}\\n\\n@keyframes fadeUp {\\n    from {\\n        opacity: 0;\\n        transform: translateY(20px);\\n    }\\n    to {\\n        opacity: 1;\\n        transform: translateY(0);\\n    }\\n}\\n\\nh2 {\\n    font-size: 1.8rem;\\n    color: var(--text-primary);\\n    margin-bottom: 1.5rem;\\n    position: relative;\\n    display: inline-block;\\n    animation: fadeIn 0.8s var(--ease-out) forwards;\\n}\\n\\n@keyframes fadeIn {\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n}\\n\\nh2::after {\\n    content: '';\\n    position: absolute;\\n    width: 60px;\\n    height: 3px;\\n    background: var(--gradient-2);\\n    bottom: -8px;\\n    left: 0;\\n    border-radius: 3px;\\n    transition: width 0.3s var(--ease-out);\\n}\\n\\nh2:hover::after {\\n    width: 100%;\\n    background: var(--gradient-1);\\n}\\n\\n.container {\\n    max-width: 1280px;\\n    margin: 0 auto;\\n    padding: 0 2rem;\\n}\\n\\n.dashboard {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 3rem;\\n    padding-bottom: 4rem;\\n    position: relative;\\n}\\n\\n.fractal-section {\\n    margin-bottom: 2rem;\\n    animation: slideUpFade 0.7s var(--ease-spring) both;\\n}\\n\\n@keyframes slideUpFade {\\n    from {\\n        opacity: 0;\\n        transform: translateY(40px);\\n    }\\n    to {\\n        opacity: 1;\\n        transform: translateY(0);\\n    }\\n}\\n\\n.section-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 2rem;\\n}\\n\\n.fractal-grid {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\\n    gap: 2rem;\\n    perspective: 1000px;\\n}\\n\\n.fractal-card {\\n    background-color: var(--card-bg);\\n    border-radius: 16px;\\n    overflow: hidden;\\n    transition: transform 0.5s var(--ease-spring), \\n                box-shadow 0.4s var(--ease-out), \\n                background-color 0.3s var(--ease-out);\\n    border: 1px solid var(--border-light);\\n    transform-origin: center bottom;\\n    position: relative;\\n    isolation: isolate;\\n    animation: floatUp 5s ease-in-out infinite;\\n}\\n\\n@keyframes floatUp {\\n    0% { transform: translateY(0px); }\\n    50% { transform: translateY(-15px); }\\n    100% { transform: translateY(0px); }\\n}\\n\\n.fractal-card:nth-child(2n) {\\n    animation-delay: 0.5s;\\n}\\n\\n.fractal-card:nth-child(3n) {\\n    animation-delay: 1s;\\n}\\n\\n.fractal-card:nth-child(4n) {\\n    animation-delay: 0.3s;\\n}\\n\\n.card-header {\\n    padding: 1.25rem 1.5rem;\\n    background-color: rgba(0, 0, 0, 0.2);\\n    border-bottom: 1px solid var(--border-light);\\n    position: relative;\\n}\\n\\n.card-header h3 {\\n    margin: 0;\\n    font-size: 1.1rem;\\n    color: var(--text-primary);\\n}\\n\\n.card-header::after {\\n    content: '';\\n    position: absolute;\\n    left: 0;\\n    bottom: -1px;\\n    width: 0;\\n    height: 1px;\\n    background: var(--gradient-2);\\n    transition: width 0.3s var(--ease-out);\\n}\\n\\n.fractal-card:hover .card-header::after {\\n    width: 100%;\\n}\\n\\ncanvas {\\n    width: 100%;\\n    height: 250px;\\n    display: block;\\n    background-color: rgba(0, 0, 0, 0.3);\\n    transition: transform 0.3s var(--ease-out), filter 0.3s var(--ease-out);\\n}\\n\\n.fractal-card:hover canvas {\\n    filter: brightness(1.1) contrast(1.05);\\n}\\n\\n.fractal-controls {\\n    padding: 1.25rem 1.5rem;\\n    border-top: 1px solid var(--border-light);\\n    transition: background-color 0.3s;\\n}\\n\\n.control-group {\\n    margin-bottom: 1rem;\\n    transition: transform 0.2s var(--ease-out);\\n}\\n\\n.fractal-card:hover .control-group {\\n    transform: translateY(-3px);\\n}\\n\\n.control-group:last-child {\\n    margin-bottom: 1.25rem;\\n}\\n\\n.header-content {\\n    max-width: 800px;\\n    margin: 0 auto;\\n    text-align: center;\\n    position: relative;\\n    z-index: 2;\\n}\\n\\n.subtitle {\\n    font-size: 1.2rem;\\n    opacity: 0.9;\\n    margin-top: 1.5rem;\\n}\\n\\n.header-decoration {\\n    width: 100%;\\n    max-width: 500px;\\n    height: 2px;\\n    background: var(--accent);\\n    margin: 1.5rem auto;\\n    position: relative;\\n    overflow: hidden;\\n    opacity: 0.6;\\n}\\n\\n.grid-overlay {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-image: linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),\\n                    linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);\\n    background-size: 40px 40px;\\n    z-index: -1;\\n    opacity: 0.4;\\n    pointer-events: none;\\n}\\n\\n.corner-decoration {\\n    position: fixed;\\n    width: 200px;\\n    height: 200px;\\n    z-index: -1;\\n    opacity: 0.2;\\n    pointer-events: none;\\n}\\n\\n.corner-top-left {\\n    top: 0;\\n    left: 0;\\n    border-top: 2px solid var(--accent);\\n    border-left: 2px solid var(--accent);\\n    border-top-left-radius: 12px;\\n}\\n\\n.corner-top-right {\\n    top: 0;\\n    right: 0;\\n    border-top: 2px solid var(--secondary);\\n    border-right: 2px solid var(--secondary);\\n    border-top-right-radius: 12px;\\n}\\n\\n.corner-bottom-left {\\n    bottom: 0;\\n    left: 0;\\n    border-bottom: 2px solid var(--secondary);\\n    border-left: 2px solid var(--secondary);\\n    border-bottom-left-radius: 12px;\\n}\\n\\n.corner-bottom-right {\\n    bottom: 0;\\n    right: 0;\\n    border-bottom: 2px solid var(--accent);\\n    border-right: 2px solid var(--accent);\\n    border-bottom-right-radius: 12px;\\n}\\n\\n.highlight {\\n    color: var(--accent);\\n    font-weight: 600;\\n    position: relative;\\n    z-index: 1;\\n}\\n\\n.footer {\\n    padding: 3rem 0;\\n    margin-top: 2rem;\\n    text-align: center;\\n    color: var(--text-secondary);\\n    position: relative;\\n}\\n\\n.footer-line {\\n    height: 1px;\\n    width: 100%;\\n    background: linear-gradient(to right, transparent, var(--border-light), transparent);\\n    margin-bottom: 2rem;\\n}\\n\\n@media (max-width: 768px) {\\n    .fractal-grid {\\n        grid-template-columns: 1fr;\\n    }\\n    \\n    h1 {\\n        font-size: 2.25rem;\\n    }\\n    \\n    h2 {\\n        font-size: 1.5rem;\\n    }\\n    \\n    header {\\n        padding: 2rem 0 4rem;\\n    }\\n    \\n    .container {\\n        padding: 0 1.25rem;\\n    }\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/**\\r\\n * Component-specific styles for the Fractal Explorer\\r\\n */\\r\\n\\r\\n/* Input range styling */\\r\\ninput[type=\\\"range\\\"] {\\r\\n  -webkit-appearance: none;\\r\\n  appearance: none;\\r\\n  width: 100%;\\r\\n  height: 5px;\\r\\n  background: rgba(100, 116, 139, 0.2);\\r\\n  border-radius: 3px;\\r\\n  outline: none;\\r\\n  margin: 0.5rem 0;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]::-webkit-slider-thumb {\\r\\n  -webkit-appearance: none;\\r\\n  appearance: none;\\r\\n  width: 16px;\\r\\n  height: 16px;\\r\\n  background: var(--primary);\\r\\n  border-radius: 50%;\\r\\n  cursor: pointer;\\r\\n  transition: transform 0.2s, box-shadow 0.2s;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]::-moz-range-thumb {\\r\\n  width: 16px;\\r\\n  height: 16px;\\r\\n  background: var(--primary);\\r\\n  border-radius: 50%;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  transition: transform 0.2s, box-shadow 0.2s;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:hover::-webkit-slider-thumb {\\r\\n  transform: scale(1.2);\\r\\n  box-shadow: 0 0 10px rgba(79, 70, 229, 0.5);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:hover::-moz-range-thumb {\\r\\n  transform: scale(1.2);\\r\\n  box-shadow: 0 0 10px rgba(79, 70, 229, 0.5);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:focus::-webkit-slider-thumb {\\r\\n  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:focus::-moz-range-thumb {\\r\\n  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\\r\\n}\\r\\n\\r\\n/* Label styles */\\r\\nlabel {\\r\\n  display: block;\\r\\n  margin-bottom: 0.5rem;\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 0.9rem;\\r\\n  font-weight: 500;\\r\\n}\\r\\n\\r\\n/* Button styling */\\r\\nbutton {\\r\\n  background: var(--primary);\\r\\n  color: white;\\r\\n  border: none;\\r\\n  border-radius: 8px;\\r\\n  padding: 0.75rem 1.25rem;\\r\\n  font-family: inherit;\\r\\n  font-weight: 500;\\r\\n  font-size: 0.95rem;\\r\\n  cursor: pointer;\\r\\n  transition: all 0.3s var(--ease-out);\\r\\n  position: relative;\\r\\n  overflow: hidden;\\r\\n  display: inline-flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  gap: 0.5rem;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\nbutton:hover {\\r\\n  background: var(--primary-hover);\\r\\n  transform: translateY(-2px);\\r\\n  box-shadow: var(--shadow-sm);\\r\\n}\\r\\n\\r\\nbutton:active {\\r\\n  transform: translateY(0);\\r\\n  background: var(--primary-active);\\r\\n}\\r\\n\\r\\nbutton::before {\\r\\n  content: '';\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: -100%;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\\r\\n  z-index: -1;\\r\\n  transition: 0.5s;\\r\\n}\\r\\n\\r\\nbutton:hover::before {\\r\\n  left: 100%;\\r\\n}\\r\\n\\r\\n/* Range value display */\\r\\n.range-value {\\r\\n  display: inline-block;\\r\\n  font-family: monospace;\\r\\n  font-size: 0.9rem;\\r\\n  color: var(--text-primary);\\r\\n  background: var(--surface-1);\\r\\n  padding: 0.25rem 0.5rem;\\r\\n  border-radius: 4px;\\r\\n  min-width: 60px;\\r\\n  text-align: center;\\r\\n  margin-left: 0.5rem;\\r\\n}\\r\\n\\r\\n/* Input group styling */\\r\\n.input-group {\\r\\n  margin-bottom: 1.25rem;\\r\\n}\\r\\n\\r\\n.input-row {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.5rem;\\r\\n}\\r\\n\\r\\n/* Fractal tooltip/modal styles */\\r\\n.fractal-tooltip {\\r\\n  position: fixed;\\r\\n  top: 50%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -50%);\\r\\n  width: 90%;\\r\\n  max-width: 700px;\\r\\n  background: var(--panel-bg);\\r\\n  backdrop-filter: blur(20px);\\r\\n  -webkit-backdrop-filter: blur(20px);\\r\\n  border-radius: 16px;\\r\\n  border: 1px solid var(--border-medium);\\r\\n  box-shadow: var(--shadow-lg), var(--glow-primary);\\r\\n  z-index: 1000;\\r\\n  animation: modalFadeIn 0.3s var(--ease-spring);\\r\\n  overflow: hidden;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n@keyframes modalFadeIn {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n    transform: translate(-50%, -48%) scale(0.95);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 1;\\r\\n    transform: translate(-50%, -50%) scale(1);\\r\\n  }\\r\\n}\\r\\n\\r\\n.fractal-tooltip-header {\\r\\n  padding: 1.25rem 1.5rem;\\r\\n  background: rgba(0, 0, 0, 0.25);\\r\\n  border-bottom: 1px solid var(--border-medium);\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-title {\\r\\n  font-size: 1.5rem;\\r\\n  font-weight: 600;\\r\\n  margin: 0;\\r\\n  color: var(--text-primary);\\r\\n  background: var(--gradient-1);\\r\\n  -webkit-background-clip: text;\\r\\n  background-clip: text;\\r\\n  color: transparent;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-close {\\r\\n  background: none;\\r\\n  border: none;\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 1.5rem;\\r\\n  cursor: pointer;\\r\\n  width: 2rem;\\r\\n  height: 2rem;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  border-radius: 50%;\\r\\n  transition: all 0.2s var(--ease-out);\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-close:hover {\\r\\n  background: rgba(236, 72, 153, 0.2);\\r\\n  color: var(--text-primary);\\r\\n  transform: none;\\r\\n  box-shadow: none;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-content {\\r\\n  padding: 2rem;\\r\\n  overflow-y: auto;\\r\\n  max-height: 70vh;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description {\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 1rem;\\r\\n  line-height: 1.6;\\r\\n  margin-bottom: 2rem;\\r\\n  background: rgba(15, 23, 42, 0.4);\\r\\n  padding: 1.5rem;\\r\\n  border-radius: 12px;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description p {\\r\\n  margin: 0 0 1rem 0;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description p:last-child {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.fractal-formula-container {\\r\\n  background: rgba(15, 23, 42, 0.4);\\r\\n  border-radius: 12px;\\r\\n  padding: 1.5rem;\\r\\n  position: relative;\\r\\n  margin-bottom: 1rem;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.formula-title {\\r\\n  font-size: 0.9rem;\\r\\n  color: var(--text-secondary);\\r\\n  margin-bottom: 0.75rem;\\r\\n  font-weight: 600;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.5rem;\\r\\n}\\r\\n\\r\\n.fractal-formula {\\r\\n  font-family: monospace;\\r\\n  color: var(--primary);\\r\\n  font-size: 0.95rem;\\r\\n  line-height: 1.6;\\r\\n  white-space: pre-wrap;\\r\\n  overflow-x: auto;\\r\\n  background: rgba(15, 23, 42, 0.6);\\r\\n  padding: 1rem;\\r\\n  border-radius: 8px;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.formula-copy-button {\\r\\n  position: absolute;\\r\\n  top: 0.75rem;\\r\\n  right: 0.75rem;\\r\\n  background: rgba(79, 70, 229, 0.2);\\r\\n  border: 1px solid rgba(79, 70, 229, 0.3);\\r\\n  color: var(--text-primary);\\r\\n  font-size: 0.8rem;\\r\\n  padding: 0.35rem 0.7rem;\\r\\n  border-radius: 6px;\\r\\n  cursor: pointer;\\r\\n  transition: all 0.2s var(--ease-out);\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.25rem;\\r\\n  opacity: 0.8;\\r\\n}\\r\\n\\r\\n.formula-copy-button:hover {\\r\\n  background: rgba(79, 70, 229, 0.3);\\r\\n  transform: translateY(-2px);\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n.formula-copied {\\r\\n  position: absolute;\\r\\n  top: 0.75rem;\\r\\n  right: 0.75rem;\\r\\n  background: rgba(16, 185, 129, 0.2);\\r\\n  color: var(--success);\\r\\n  border: 1px solid rgba(16, 185, 129, 0.3);\\r\\n  font-size: 0.8rem;\\r\\n  padding: 0.35rem 0.7rem;\\r\\n  border-radius: 6px;\\r\\n  opacity: 0;\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.formula-copied.visible {\\r\\n  animation: fadeInOut 1.5s var(--ease-out);\\r\\n}\\r\\n\\r\\n@keyframes fadeInOut {\\r\\n  0% { opacity: 0; }\\r\\n  20% { opacity: 1; }\\r\\n  80% { opacity: 1; }\\r\\n  100% { opacity: 0; }\\r\\n}\\r\\n\\r\\n.fractal-modal-backdrop {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  background: rgba(0, 0, 0, 0.5);\\r\\n  backdrop-filter: blur(4px);\\r\\n  -webkit-backdrop-filter: blur(4px);\\r\\n  z-index: 999;\\r\\n  animation: backdropFadeIn 0.3s var(--ease-out);\\r\\n}\\r\\n\\r\\n@keyframes backdropFadeIn {\\r\\n  from { opacity: 0; }\\r\\n  to { opacity: 1; }\\r\\n}\\r\\n\\r\\n/* Editor styles */\\r\\n.editor-container {\\r\\n  display: grid;\\r\\n  grid-template-columns: 1fr 1fr;\\r\\n  gap: 2rem;\\r\\n  margin-bottom: 3rem;\\r\\n}\\r\\n\\r\\n.editor-panel {\\r\\n  background: var(--card-bg);\\r\\n  border-radius: 16px;\\r\\n  border: 1px solid var(--border-light);\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.editor-header {\\r\\n  padding: 1.25rem 1.5rem;\\r\\n  background: rgba(0, 0, 0, 0.2);\\r\\n  border-bottom: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.editor-header h3 {\\r\\n  margin: 0;\\r\\n  font-size: 1.2rem;\\r\\n  color: var(--text-primary);\\r\\n}\\r\\n\\r\\n.editor-controls {\\r\\n  padding: 1.5rem;\\r\\n}\\r\\n\\r\\n.editor-canvas-container {\\r\\n  width: 100%;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.editor-canvas {\\r\\n  width: 100%;\\r\\n  height: 350px;\\r\\n  display: block;\\r\\n  background-color: rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n\\r\\n/* For tablet and below */\\r\\n@media (max-width: 1024px) {\\r\\n  .editor-container {\\r\\n    grid-template-columns: 1fr;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* For small screens */\\r\\n@media (max-width: 640px) {\\r\\n  .fractal-tooltip {\\r\\n    width: 95%;\\r\\n    max-height: 90vh;\\r\\n  }\\r\\n  \\r\\n  .fractal-tooltip-content {\\r\\n    padding: 1.5rem;\\r\\n  }\\r\\n} \", \"\",{\"version\":3,\"sources\":[\"webpack://./styles/components.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\r\\n * Component-specific styles for the Fractal Explorer\\r\\n */\\r\\n\\r\\n/* Input range styling */\\r\\ninput[type=\\\"range\\\"] {\\r\\n  -webkit-appearance: none;\\r\\n  appearance: none;\\r\\n  width: 100%;\\r\\n  height: 5px;\\r\\n  background: rgba(100, 116, 139, 0.2);\\r\\n  border-radius: 3px;\\r\\n  outline: none;\\r\\n  margin: 0.5rem 0;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]::-webkit-slider-thumb {\\r\\n  -webkit-appearance: none;\\r\\n  appearance: none;\\r\\n  width: 16px;\\r\\n  height: 16px;\\r\\n  background: var(--primary);\\r\\n  border-radius: 50%;\\r\\n  cursor: pointer;\\r\\n  transition: transform 0.2s, box-shadow 0.2s;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]::-moz-range-thumb {\\r\\n  width: 16px;\\r\\n  height: 16px;\\r\\n  background: var(--primary);\\r\\n  border-radius: 50%;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  transition: transform 0.2s, box-shadow 0.2s;\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:hover::-webkit-slider-thumb {\\r\\n  transform: scale(1.2);\\r\\n  box-shadow: 0 0 10px rgba(79, 70, 229, 0.5);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:hover::-moz-range-thumb {\\r\\n  transform: scale(1.2);\\r\\n  box-shadow: 0 0 10px rgba(79, 70, 229, 0.5);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:focus::-webkit-slider-thumb {\\r\\n  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\\r\\n}\\r\\n\\r\\ninput[type=\\\"range\\\"]:focus::-moz-range-thumb {\\r\\n  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\\r\\n}\\r\\n\\r\\n/* Label styles */\\r\\nlabel {\\r\\n  display: block;\\r\\n  margin-bottom: 0.5rem;\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 0.9rem;\\r\\n  font-weight: 500;\\r\\n}\\r\\n\\r\\n/* Button styling */\\r\\nbutton {\\r\\n  background: var(--primary);\\r\\n  color: white;\\r\\n  border: none;\\r\\n  border-radius: 8px;\\r\\n  padding: 0.75rem 1.25rem;\\r\\n  font-family: inherit;\\r\\n  font-weight: 500;\\r\\n  font-size: 0.95rem;\\r\\n  cursor: pointer;\\r\\n  transition: all 0.3s var(--ease-out);\\r\\n  position: relative;\\r\\n  overflow: hidden;\\r\\n  display: inline-flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  gap: 0.5rem;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\nbutton:hover {\\r\\n  background: var(--primary-hover);\\r\\n  transform: translateY(-2px);\\r\\n  box-shadow: var(--shadow-sm);\\r\\n}\\r\\n\\r\\nbutton:active {\\r\\n  transform: translateY(0);\\r\\n  background: var(--primary-active);\\r\\n}\\r\\n\\r\\nbutton::before {\\r\\n  content: '';\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: -100%;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\\r\\n  z-index: -1;\\r\\n  transition: 0.5s;\\r\\n}\\r\\n\\r\\nbutton:hover::before {\\r\\n  left: 100%;\\r\\n}\\r\\n\\r\\n/* Range value display */\\r\\n.range-value {\\r\\n  display: inline-block;\\r\\n  font-family: monospace;\\r\\n  font-size: 0.9rem;\\r\\n  color: var(--text-primary);\\r\\n  background: var(--surface-1);\\r\\n  padding: 0.25rem 0.5rem;\\r\\n  border-radius: 4px;\\r\\n  min-width: 60px;\\r\\n  text-align: center;\\r\\n  margin-left: 0.5rem;\\r\\n}\\r\\n\\r\\n/* Input group styling */\\r\\n.input-group {\\r\\n  margin-bottom: 1.25rem;\\r\\n}\\r\\n\\r\\n.input-row {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.5rem;\\r\\n}\\r\\n\\r\\n/* Fractal tooltip/modal styles */\\r\\n.fractal-tooltip {\\r\\n  position: fixed;\\r\\n  top: 50%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -50%);\\r\\n  width: 90%;\\r\\n  max-width: 700px;\\r\\n  background: var(--panel-bg);\\r\\n  backdrop-filter: blur(20px);\\r\\n  -webkit-backdrop-filter: blur(20px);\\r\\n  border-radius: 16px;\\r\\n  border: 1px solid var(--border-medium);\\r\\n  box-shadow: var(--shadow-lg), var(--glow-primary);\\r\\n  z-index: 1000;\\r\\n  animation: modalFadeIn 0.3s var(--ease-spring);\\r\\n  overflow: hidden;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n@keyframes modalFadeIn {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n    transform: translate(-50%, -48%) scale(0.95);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 1;\\r\\n    transform: translate(-50%, -50%) scale(1);\\r\\n  }\\r\\n}\\r\\n\\r\\n.fractal-tooltip-header {\\r\\n  padding: 1.25rem 1.5rem;\\r\\n  background: rgba(0, 0, 0, 0.25);\\r\\n  border-bottom: 1px solid var(--border-medium);\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-title {\\r\\n  font-size: 1.5rem;\\r\\n  font-weight: 600;\\r\\n  margin: 0;\\r\\n  color: var(--text-primary);\\r\\n  background: var(--gradient-1);\\r\\n  -webkit-background-clip: text;\\r\\n  background-clip: text;\\r\\n  color: transparent;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-close {\\r\\n  background: none;\\r\\n  border: none;\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 1.5rem;\\r\\n  cursor: pointer;\\r\\n  width: 2rem;\\r\\n  height: 2rem;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  border-radius: 50%;\\r\\n  transition: all 0.2s var(--ease-out);\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-close:hover {\\r\\n  background: rgba(236, 72, 153, 0.2);\\r\\n  color: var(--text-primary);\\r\\n  transform: none;\\r\\n  box-shadow: none;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-content {\\r\\n  padding: 2rem;\\r\\n  overflow-y: auto;\\r\\n  max-height: 70vh;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description {\\r\\n  color: var(--text-secondary);\\r\\n  font-size: 1rem;\\r\\n  line-height: 1.6;\\r\\n  margin-bottom: 2rem;\\r\\n  background: rgba(15, 23, 42, 0.4);\\r\\n  padding: 1.5rem;\\r\\n  border-radius: 12px;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description p {\\r\\n  margin: 0 0 1rem 0;\\r\\n}\\r\\n\\r\\n.fractal-tooltip-description p:last-child {\\r\\n  margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.fractal-formula-container {\\r\\n  background: rgba(15, 23, 42, 0.4);\\r\\n  border-radius: 12px;\\r\\n  padding: 1.5rem;\\r\\n  position: relative;\\r\\n  margin-bottom: 1rem;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.formula-title {\\r\\n  font-size: 0.9rem;\\r\\n  color: var(--text-secondary);\\r\\n  margin-bottom: 0.75rem;\\r\\n  font-weight: 600;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.5rem;\\r\\n}\\r\\n\\r\\n.fractal-formula {\\r\\n  font-family: monospace;\\r\\n  color: var(--primary);\\r\\n  font-size: 0.95rem;\\r\\n  line-height: 1.6;\\r\\n  white-space: pre-wrap;\\r\\n  overflow-x: auto;\\r\\n  background: rgba(15, 23, 42, 0.6);\\r\\n  padding: 1rem;\\r\\n  border-radius: 8px;\\r\\n  border: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.formula-copy-button {\\r\\n  position: absolute;\\r\\n  top: 0.75rem;\\r\\n  right: 0.75rem;\\r\\n  background: rgba(79, 70, 229, 0.2);\\r\\n  border: 1px solid rgba(79, 70, 229, 0.3);\\r\\n  color: var(--text-primary);\\r\\n  font-size: 0.8rem;\\r\\n  padding: 0.35rem 0.7rem;\\r\\n  border-radius: 6px;\\r\\n  cursor: pointer;\\r\\n  transition: all 0.2s var(--ease-out);\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  gap: 0.25rem;\\r\\n  opacity: 0.8;\\r\\n}\\r\\n\\r\\n.formula-copy-button:hover {\\r\\n  background: rgba(79, 70, 229, 0.3);\\r\\n  transform: translateY(-2px);\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n.formula-copied {\\r\\n  position: absolute;\\r\\n  top: 0.75rem;\\r\\n  right: 0.75rem;\\r\\n  background: rgba(16, 185, 129, 0.2);\\r\\n  color: var(--success);\\r\\n  border: 1px solid rgba(16, 185, 129, 0.3);\\r\\n  font-size: 0.8rem;\\r\\n  padding: 0.35rem 0.7rem;\\r\\n  border-radius: 6px;\\r\\n  opacity: 0;\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.formula-copied.visible {\\r\\n  animation: fadeInOut 1.5s var(--ease-out);\\r\\n}\\r\\n\\r\\n@keyframes fadeInOut {\\r\\n  0% { opacity: 0; }\\r\\n  20% { opacity: 1; }\\r\\n  80% { opacity: 1; }\\r\\n  100% { opacity: 0; }\\r\\n}\\r\\n\\r\\n.fractal-modal-backdrop {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  background: rgba(0, 0, 0, 0.5);\\r\\n  backdrop-filter: blur(4px);\\r\\n  -webkit-backdrop-filter: blur(4px);\\r\\n  z-index: 999;\\r\\n  animation: backdropFadeIn 0.3s var(--ease-out);\\r\\n}\\r\\n\\r\\n@keyframes backdropFadeIn {\\r\\n  from { opacity: 0; }\\r\\n  to { opacity: 1; }\\r\\n}\\r\\n\\r\\n/* Editor styles */\\r\\n.editor-container {\\r\\n  display: grid;\\r\\n  grid-template-columns: 1fr 1fr;\\r\\n  gap: 2rem;\\r\\n  margin-bottom: 3rem;\\r\\n}\\r\\n\\r\\n.editor-panel {\\r\\n  background: var(--card-bg);\\r\\n  border-radius: 16px;\\r\\n  border: 1px solid var(--border-light);\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.editor-header {\\r\\n  padding: 1.25rem 1.5rem;\\r\\n  background: rgba(0, 0, 0, 0.2);\\r\\n  border-bottom: 1px solid var(--border-light);\\r\\n}\\r\\n\\r\\n.editor-header h3 {\\r\\n  margin: 0;\\r\\n  font-size: 1.2rem;\\r\\n  color: var(--text-primary);\\r\\n}\\r\\n\\r\\n.editor-controls {\\r\\n  padding: 1.5rem;\\r\\n}\\r\\n\\r\\n.editor-canvas-container {\\r\\n  width: 100%;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.editor-canvas {\\r\\n  width: 100%;\\r\\n  height: 350px;\\r\\n  display: block;\\r\\n  background-color: rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n\\r\\n/* For tablet and below */\\r\\n@media (max-width: 1024px) {\\r\\n  .editor-container {\\r\\n    grid-template-columns: 1fr;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* For small screens */\\r\\n@media (max-width: 640px) {\\r\\n  .fractal-tooltip {\\r\\n    width: 95%;\\r\\n    max-height: 90vh;\\r\\n  }\\r\\n  \\r\\n  .fractal-tooltip-content {\\r\\n    padding: 1.5rem;\\r\\n  }\\r\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Sierpinski Triangle fractal using chaos game\r\n */\r\nexport class TriangleFractal extends ChaosGameBase {\r\n    private points: Point[];\r\n    private animationId: number | null = null;\r\n    private isAnimating: boolean = false;\r\n    \r\n    /**\r\n     * Constructor for the Triangle fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 10000) {\r\n        super(canvasId, iterations);\r\n        this.points = [];\r\n    }\r\n    \r\n    /**\r\n     * Initialize the Triangle fractal\r\n     * Override to set up triangle vertices\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        const w = this.canvas.width;\r\n        const h = this.canvas.height;\r\n        \r\n        // Set up triangle points\r\n        this.points = [\r\n            [w / 2, 20],           // top\r\n            [20, h - 20],          // bottom left\r\n            [w - 20, h - 20]       // bottom right\r\n        ];\r\n        \r\n        // Clear canvas before plotting vertices\r\n        this.clear();\r\n        \r\n        // Draw the vertices\r\n        this.points.forEach(p => this.plot(p, 3));\r\n    }\r\n    \r\n    /**\r\n     * Generates the Triangle fractal using the chaos game algorithm\r\n     * @param animate - Whether to animate the generation or not\r\n     * @param speed - Animation speed (points per frame)\r\n     */\r\n    public generate(animate: boolean = false, speed: number = 100): void {\r\n        // Stop any ongoing animation\r\n        this.stopAnimation();\r\n        \r\n        this.initialize();\r\n        \r\n        if (animate) {\r\n            this.animateGeneration(speed);\r\n        } else {\r\n            // Non-animated generation\r\n            let currentPoint = this.startingPoint;\r\n            this.plot(currentPoint);\r\n            \r\n            for (let i = 0; i < this.iterationsCount; i++) {\r\n                // Pick a random vertex\r\n                const randomIndex = Math.floor(Math.random() * this.points.length);\r\n                const targetPoint = this.points[randomIndex];\r\n                \r\n                // Move halfway to that vertex\r\n                currentPoint = this.midpoint(currentPoint, targetPoint);\r\n                this.plot(currentPoint);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Animates the generation of the fractal\r\n     * @param pointsPerFrame - Number of points to draw per animation frame\r\n     */\r\n    private animateGeneration(pointsPerFrame: number = 100): void {\r\n        let currentPoint = this.startingPoint;\r\n        let step = 0;\r\n        \r\n        this.plot(currentPoint);\r\n        this.isAnimating = true;\r\n        \r\n        const animate = () => {\r\n            if (step >= this.iterationsCount || !this.isAnimating) {\r\n                this.isAnimating = false;\r\n                this.animationId = null;\r\n                return;\r\n            }\r\n            \r\n            // Draw multiple points per frame for better performance\r\n            for (let i = 0; i < pointsPerFrame && step < this.iterationsCount; i++, step++) {\r\n                // Pick a random vertex\r\n                const randomIndex = Math.floor(Math.random() * this.points.length);\r\n                const targetPoint = this.points[randomIndex];\r\n                \r\n                // Move halfway to that vertex\r\n                currentPoint = this.midpoint(currentPoint, targetPoint);\r\n                this.plot(currentPoint);\r\n            }\r\n            \r\n            this.animationId = requestAnimationFrame(animate);\r\n        };\r\n        \r\n        this.animationId = requestAnimationFrame(animate);\r\n    }\r\n    \r\n    /**\r\n     * Stops any ongoing animation\r\n     */\r\n    public stopAnimation(): void {\r\n        if (this.animationId !== null) {\r\n            cancelAnimationFrame(this.animationId);\r\n            this.animationId = null;\r\n        }\r\n        this.isAnimating = false;\r\n    }\r\n    \r\n    /**\r\n     * Returns whether the fractal is currently animating\r\n     */\r\n    public isCurrentlyAnimating(): boolean {\r\n        return this.isAnimating;\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Triangle fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Triangle Fractal',\r\n            description: 'The Sierpinski Triangle emerges from a simple chaos game: repeatedly move halfway towards a randomly chosen vertex of a triangle.',\r\n            formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i is a randomly chosen vertex'\r\n        };\r\n    }\r\n} ","/**\r\n * Base class for all fractals\r\n */\r\nexport abstract class FractalBase {\r\n    protected canvas: HTMLCanvasElement;\r\n    protected ctx: CanvasRenderingContext2D;\r\n    public canvasId: string;\r\n\r\n    /**\r\n     * Constructor for the base fractal class\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     */\r\n    constructor(canvasId: string) {\r\n        this.canvasId = canvasId;\r\n    }\r\n\r\n    /**\r\n     * Initialize the canvas element and context\r\n     * This is called after the canvas is created by the FractalCard\r\n     */\r\n    public initialize(): void {\r\n        this.canvas = document.getElementById(this.canvasId) as HTMLCanvasElement;\r\n        if (!this.canvas) {\r\n            throw new Error(`Canvas element with ID ${this.canvasId} not found`);\r\n        }\r\n        \r\n        const context = this.canvas.getContext('2d');\r\n        if (!context) {\r\n            throw new Error(`Could not get 2D context for canvas ${this.canvasId}`);\r\n        }\r\n        \r\n        this.ctx = context;\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas with a black background\r\n     */\r\n    public clear(): void {\r\n        if (!this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    /**\r\n     * Abstract method to generate the fractal\r\n     * Must be implemented by all derived classes\r\n     */\r\n    public abstract generate(): void;\r\n\r\n    /**\r\n     * Get description data for this fractal\r\n     * Should be implemented by derived classes to provide information\r\n     */\r\n    public abstract getInfo(): FractalInfo;\r\n}\r\n\r\n/**\r\n * Interface for fractal information\r\n */\r\nexport interface FractalInfo {\r\n    title: string;\r\n    description: string;\r\n    formula: string;\r\n} ","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Restricted Square Fractal using chaos game\r\n */\r\nexport class RestrictedSquareFractal extends ChaosGameBase {\r\n    private points: Point[];\r\n    \r\n    /**\r\n     * Constructor for the Restricted Square fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 10000) {\r\n        super(canvasId, iterations);\r\n        this.points = [];\r\n    }\r\n    \r\n    /**\r\n     * Initialize the Restricted Square fractal\r\n     * Override to set up square vertices\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        const w = this.canvas.width;\r\n        const h = this.canvas.height;\r\n        \r\n        // Set up square points\r\n        this.points = [\r\n            [20, 20],          // top-left (0)\r\n            [w - 20, 20],      // top-right (1)\r\n            [20, h - 20],      // bottom-left (2)\r\n            [w - 20, h - 20]   // bottom-right (3)\r\n        ];\r\n        \r\n        // Clear canvas before plotting vertices\r\n        this.clear();\r\n        \r\n        // Draw the vertices\r\n        this.points.forEach(p => this.plot(p, 3));\r\n    }\r\n    \r\n    /**\r\n     * Generates the Restricted Square fractal using the chaos game algorithm\r\n     * with restrictions that prevent movement to opposite corners\r\n     */\r\n    public generate(): void {\r\n        this.initialize();\r\n        \r\n        let currentPoint = this.startingPoint;\r\n        this.plot(currentPoint);\r\n        let previousVertex = -1;\r\n        \r\n        // Restriction rules - cannot move to opposite corner\r\n        const restrictions: {[key: number]: number} = {\r\n            0: 3, // can't go from top-left to bottom-right\r\n            1: 2, // can't go from top-right to bottom-left\r\n            2: 1, // can't go from bottom-left to top-right\r\n            3: 0  // can't go from bottom-right to top-left\r\n        };\r\n        \r\n        for (let i = 0; i < this.iterationsCount; i++) {\r\n            // Pick a random vertex that isn't restricted\r\n            let randomIndex: number;\r\n            do {\r\n                randomIndex = Math.floor(Math.random() * 4);\r\n            } while (previousVertex !== -1 && randomIndex === restrictions[previousVertex]);\r\n            \r\n            const targetPoint = this.points[randomIndex];\r\n            \r\n            // Move halfway to that vertex\r\n            currentPoint = this.midpoint(currentPoint, targetPoint);\r\n            this.plot(currentPoint);\r\n            previousVertex = randomIndex;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Restricted Square fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Restricted Square Fractal',\r\n            description: 'A square fractal with restrictions that prevent certain vertex combinations, creating interesting patterns.',\r\n            formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i cannot be opposite to the previously chosen vertex'\r\n        };\r\n    }\r\n} ","import { ChaosGameBase } from './ChaosGameBase';\nimport { FractalInfo } from '../FractalBase';\n\n/**\n * Implementation of a Square fractal with non-repeating vertex selection\n */\nexport class NonRepeatSquareFractal extends ChaosGameBase {\n    /**\n     * Constructor for the Non-Repeat Square fractal\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param iterations - The number of iterations to perform\n     */\n    constructor(canvasId: string, iterations: number = 50000) {\n        super(canvasId, iterations);\n    }\n    \n    /**\n     * Generates the Non-Repeat Square fractal\n     */\n    public generate(): void {\n        this.clear();\n        \n        if (!this.canvas || !this.ctx) {\n            this.initialize();\n        }\n        \n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        \n        // Define the vertices of a square\n        const padding = 50;\n        const vertices = [\n            { x: padding, y: padding }, // top-left\n            { x: width - padding, y: padding }, // top-right\n            { x: width - padding, y: height - padding }, // bottom-right\n            { x: padding, y: height - padding } // bottom-left\n        ];\n        \n        // Draw the vertices\n        this.ctx.fillStyle = '#FF5555';\n        vertices.forEach(vertex => {\n            this.ctx.beginPath();\n            this.ctx.arc(vertex.x, vertex.y, 3, 0, Math.PI * 2);\n            this.ctx.fill();\n        });\n        \n        // Choose random initial point\n        let x = Math.random() * width;\n        let y = Math.random() * height;\n        \n        // Track the previous vertex index\n        let prevIndex = -1;\n        \n        // Set drawing style\n        this.ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';\n        \n        // Run the chaos game\n        for (let i = 0; i < this.iterationsCount; i++) {\n            // Choose a random vertex (not the same as the previous one)\n            let randomIndex;\n            do {\n                randomIndex = Math.floor(Math.random() * vertices.length);\n            } while (randomIndex === prevIndex);\n            \n            prevIndex = randomIndex;\n            const vertex = vertices[randomIndex];\n            \n            // Move halfway to the chosen vertex\n            x = (x + vertex.x) / 2;\n            y = (y + vertex.y) / 2;\n            \n            // Skip the first 20 iterations (transient phase)\n            if (i > 20) {\n                // Draw a point\n                this.ctx.beginPath();\n                this.ctx.rect(x, y, 1, 1);\n                this.ctx.fill();\n            }\n        }\n    }\n    \n    /**\n     * Returns information about the Non-Repeat Square fractal\n     */\n    public getInfo(): FractalInfo {\n        return {\n            title: 'Non-Repeat Square',\n            description: 'A variant that prevents consecutive selection of the same vertex, creating more diverse patterns.',\n            formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i is determined by a non-repeating dice roll'\n        };\n    }\n} ","import { ChaosGameBase } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of a Modified Square fractal with altered positioning rules\r\n */\r\nexport class ModifiedSquareFractal extends ChaosGameBase {\r\n    /**\r\n     * Constructor for the Modified Square fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 50000) {\r\n        super(canvasId, iterations);\r\n    }\r\n    \r\n    /**\r\n     * Generates the Modified Square fractal\r\n     */\r\n    public generate(): void {\r\n        this.clear();\r\n        \r\n        if (!this.canvas || !this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        \r\n        // Define the vertices of a modified square (slightly offset from regular square)\r\n        const padding = 50;\r\n        const vertices = [\r\n            { x: padding, y: padding }, // top-left\r\n            { x: width - padding, y: padding * 1.2 }, // top-right\r\n            { x: width - padding * 1.2, y: height - padding }, // bottom-right\r\n            { x: padding * 1.1, y: height - padding * 1.1 } // bottom-left\r\n        ];\r\n        \r\n        // Draw the vertices\r\n        this.ctx.fillStyle = '#FF5555';\r\n        vertices.forEach(vertex => {\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(vertex.x, vertex.y, 3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Choose random initial point\r\n        let x = Math.random() * width;\r\n        let y = Math.random() * height;\r\n        \r\n        // Set drawing style\r\n        this.ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';\r\n        \r\n        // Track the previous vertex index\r\n        let prevIndex = -1;\r\n        \r\n        // Run the chaos game with a twist\r\n        for (let i = 0; i < this.iterationsCount; i++) {\r\n            // Choose a random vertex with constraints\r\n            let randomIndex;\r\n            \r\n            // Modified selection rule: vertices are chosen with varying probabilities and constraints\r\n            if (prevIndex === -1) {\r\n                // First iteration - choose any vertex\r\n                randomIndex = Math.floor(Math.random() * vertices.length);\r\n            } else if (prevIndex === 0) {\r\n                // If previous was top-left, can't go to bottom-right\r\n                randomIndex = Math.floor(Math.random() * 3);\r\n                if (randomIndex >= 2) randomIndex = 3; // Skip the forbidden vertex\r\n            } else if (prevIndex === 2) {\r\n                // If previous was bottom-right, can't go to top-left\r\n                randomIndex = 1 + Math.floor(Math.random() * 3);\r\n                if (randomIndex >= 4) randomIndex = 0; // Wrap around\r\n            } else {\r\n                // Otherwise, any vertex is possible, but with different probabilities\r\n                const r = Math.random();\r\n                if (r < 0.4) {\r\n                    // 40% chance of choosing the vertex opposite to the previous\r\n                    randomIndex = (prevIndex + 2) % 4;\r\n                } else {\r\n                    // 60% chance of choosing one of the adjacent vertices\r\n                    randomIndex = (prevIndex + (Math.random() < 0.5 ? 1 : 3)) % 4;\r\n                }\r\n            }\r\n            \r\n            prevIndex = randomIndex;\r\n            const vertex = vertices[randomIndex];\r\n            \r\n            // Different contraction rates for different vertices\r\n            const rate = randomIndex % 2 === 0 ? 0.5 : 0.55; // Different rates for different corners\r\n            x = (1 - rate) * x + rate * vertex.x;\r\n            y = (1 - rate) * y + rate * vertex.y;\r\n            \r\n            // Skip the first 20 iterations (transient phase)\r\n            if (i > 20) {\r\n                // Draw a point with different sizes based on vertex\r\n                const pointSize = randomIndex % 2 === 0 ? 1 : 1.5;\r\n                this.ctx.beginPath();\r\n                this.ctx.rect(x, y, pointSize, pointSize);\r\n                this.ctx.fill();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Modified Square fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Modified Square',\r\n            description: 'A modified square fractal with altered vertex positions and selection rules, creating asymmetric patterns.',\r\n            formula: 'P_{n+1} = (1-r) * P_n + r * V_i\\nwith altered vertex positions and variable contraction rates'\r\n        };\r\n    }\r\n} ","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implements a hexagon-based chaos game with the restriction that\r\n * consecutive vertex selections cannot be adjacent vertices\r\n */\r\nexport class AdjacentRestrictionFractal extends ChaosGameBase {\r\n    private lastVertexIndex: number = -1;\r\n    private vertices: Point[] = [];\r\n    private vertexCount: number = 6; // Hexagon\r\n    private currentPoint: Point;\r\n    private animationId: number | null = null;\r\n    private animationStep: number = 0;\r\n    private contractionRatio: number = 0.5; // Default contraction ratio (halfway)\r\n    \r\n    /**\r\n     * Constructor for the Adjacent Restriction fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 20000) {\r\n        super(canvasId, iterations);\r\n        // Enhanced color palette for better visualization\r\n        this.colorPalette = [\"#0088ff\", \"#00ff88\", \"#ff0088\", \"#ffff00\", \"#ff8800\", \"#8800ff\"];\r\n        this.currentPoint = [0, 0]; // Will be set in initialize\r\n    }\r\n    \r\n    /**\r\n     * Initialize the fractal\r\n     * Override to set up hexagon vertices\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        const radius = Math.min(width, height) * 0.45;\r\n        const centerX = width / 2;\r\n        const centerY = height / 2;\r\n        \r\n        // Create hexagon vertices\r\n        this.vertices = [];\r\n        for (let i = 0; i < this.vertexCount; i++) {\r\n            const angle = (Math.PI / 3) * i; // 60° between vertices (360° / 6 = 60°)\r\n            const x = centerX + radius * Math.cos(angle);\r\n            const y = centerY + radius * Math.sin(angle);\r\n            this.vertices.push([x, y]);\r\n        }\r\n        \r\n        // Clear canvas before plotting vertices\r\n        this.clear();\r\n        \r\n        // Draw the hexagon boundary\r\n        this.ctx.strokeStyle = \"#FFFFFF\";\r\n        this.ctx.lineWidth = 1.5;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.vertices[0][0], this.vertices[0][1]);\r\n        for (let i = 1; i <= this.vertexCount; i++) {\r\n            const idx = i % this.vertexCount;\r\n            this.ctx.lineTo(this.vertices[idx][0], this.vertices[idx][1]);\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n        \r\n        // Draw the vertices with their respective colors\r\n        this.vertices.forEach((p, idx) => {\r\n            this.ctx.fillStyle = this.colorPalette[idx % this.colorPalette.length];\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(p[0], p[1], 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n        \r\n        // Reset animation state\r\n        this.animationStep = 0;\r\n        this.lastVertexIndex = -1;\r\n        \r\n        // Set starting point to center of canvas\r\n        this.currentPoint = this.startingPoint;\r\n    }\r\n    \r\n    /**\r\n     * Sets the color scheme for the fractal\r\n     * @param colorScheme An array of hex color strings\r\n     */\r\n    public setColorScheme(colorScheme: string[]): void {\r\n        this.colorPalette = colorScheme;\r\n    }\r\n    \r\n    /**\r\n     * Sets the contraction ratio (how far to move towards the chosen vertex)\r\n     * @param ratio A value between 0 and 1\r\n     */\r\n    public setContractionRatio(ratio: number): void {\r\n        this.contractionRatio = Math.max(0.1, Math.min(0.9, ratio));\r\n    }\r\n    \r\n    /**\r\n     * Moves a point towards the target by the specified contraction ratio\r\n     */\r\n    protected moveTowardsTarget(p1: Point, p2: Point): Point {\r\n        return [\r\n            p1[0] + this.contractionRatio * (p2[0] - p1[0]),\r\n            p1[1] + this.contractionRatio * (p2[1] - p1[1])\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Generate the fractal using adjacent vertex restriction\r\n     * @param animate Whether to animate the generation\r\n     * @param batchSize The number of points to generate per animation frame\r\n     */\r\n    public generate(animate: boolean = false, batchSize: number = 100): void {\r\n        // If already animating, stop current animation\r\n        this.stopAnimation();\r\n        \r\n        this.initialize();\r\n        \r\n        if (animate) {\r\n            // Start animation\r\n            this.animate(batchSize);\r\n        } else {\r\n            // Generate all at once\r\n            this.generatePoints(this.iterationsCount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Stop the animation if it's running\r\n     */\r\n    public stopAnimation(): void {\r\n        if (this.animationId !== null) {\r\n            cancelAnimationFrame(this.animationId);\r\n            this.animationId = null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Animate the fractal generation\r\n     */\r\n    private animate(batchSize: number): void {\r\n        const animateStep = () => {\r\n            if (this.animationStep >= this.iterationsCount) {\r\n                this.animationId = null;\r\n                return;\r\n            }\r\n            \r\n            // Draw a batch of points\r\n            this.generatePoints(Math.min(batchSize, this.iterationsCount - this.animationStep));\r\n            \r\n            // Request next animation frame\r\n            this.animationId = requestAnimationFrame(animateStep);\r\n        };\r\n        \r\n        // Start animation\r\n        this.animationId = requestAnimationFrame(animateStep);\r\n    }\r\n    \r\n    /**\r\n     * Generate a specific number of points for the fractal\r\n     */\r\n    private generatePoints(count: number): void {\r\n        for (let i = 0; i < count; i++) {\r\n            // Get random vertex that's not adjacent to last vertex\r\n            let vertexIndex: number;\r\n            do {\r\n                vertexIndex = Math.floor(Math.random() * this.vertexCount);\r\n            } while (\r\n                this.lastVertexIndex !== -1 && \r\n                (vertexIndex === this.lastVertexIndex || \r\n                 vertexIndex === (this.lastVertexIndex + 1) % this.vertexCount ||\r\n                 vertexIndex === (this.lastVertexIndex + this.vertexCount - 1) % this.vertexCount)\r\n            );\r\n            \r\n            // Move towards the selected vertex by the contraction ratio\r\n            const selectedVertex = this.vertices[vertexIndex];\r\n            this.currentPoint = this.moveTowardsTarget(this.currentPoint, selectedVertex);\r\n            \r\n            // Plot the point with color based on vertex\r\n            this.ctx.fillStyle = this.colorPalette[vertexIndex % this.colorPalette.length];\r\n            \r\n            // Draw a small circle for better visual appeal (anti-aliased)\r\n            const size = 1.2; // Slightly larger point for better visibility\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.currentPoint[0], this.currentPoint[1], size/2, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Remember this vertex for next iteration\r\n            this.lastVertexIndex = vertexIndex;\r\n            this.animationStep++;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return information about this fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: \"Adjacent Restriction Fractal\",\r\n            description: \"This fractal is generated using a chaos game on a regular hexagon with the restriction that consecutive vertex selections cannot be adjacent. This creates intricate patterns with interesting symmetry and complexity.\",\r\n            formula: \"Let v be a vertex chosen at random, but not adjacent to the previous vertex. Then x_{n+1} = x_n + r * (v - x_n) where we move a portion of the way to the chosen vertex\"\r\n        };\r\n    }\r\n} ","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Sierpinski Carpet using chaos game\r\n */\r\nexport class SierpinskiCarpet extends ChaosGameBase {\r\n    private points: Point[];\r\n    \r\n    /**\r\n     * Constructor for the Sierpinski Carpet fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 50000) {\r\n        super(canvasId, iterations);\r\n        this.points = [];\r\n        this.colorPalette = [\"#00FFFF\", \"#FF00FF\", \"#FFFF00\", \"#00FF00\"];\r\n    }\r\n    \r\n    /**\r\n     * Initialize the Sierpinski Carpet fractal\r\n     * Override to set up the 8 vertices of the carpet\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        const w = this.canvas.width;\r\n        const h = this.canvas.height;\r\n        const padding = 20;\r\n        \r\n        // Set up 8 points around a square (excluding the center)\r\n        this.points = [\r\n            [padding, padding],                   // top-left (0)\r\n            [w/2, padding],                       // top-middle (1)\r\n            [w - padding, padding],               // top-right (2)\r\n            [w - padding, h/2],                   // middle-right (3)\r\n            [w - padding, h - padding],           // bottom-right (4)\r\n            [w/2, h - padding],                   // bottom-middle (5)\r\n            [padding, h - padding],               // bottom-left (6)\r\n            [padding, h/2]                        // middle-left (7)\r\n        ];\r\n        \r\n        // Clear canvas before plotting vertices\r\n        this.clear();\r\n        \r\n        // Draw the vertices\r\n        this.points.forEach((p, i) => {\r\n            this.ctx.fillStyle = this.colorPalette[i % this.colorPalette.length];\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(p[0], p[1], 3, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Generates the Sierpinski Carpet fractal using the chaos game algorithm\r\n     * with a 2/3 ratio instead of 1/2\r\n     */\r\n    public generate(): void {\r\n        this.initialize();\r\n        \r\n        let currentPoint = this.startingPoint;\r\n        let previousVertex = -1;\r\n        \r\n        // Skip first 20 iterations (transient phase)\r\n        for (let i = 0; i < 20; i++) {\r\n            const randomIndex = Math.floor(Math.random() * 8);\r\n            const targetPoint = this.points[randomIndex];\r\n            \r\n            // Move 2/3 of the way to the chosen vertex\r\n            currentPoint = [\r\n                currentPoint[0] + (targetPoint[0] - currentPoint[0]) * (2/3),\r\n                currentPoint[1] + (targetPoint[1] - currentPoint[1]) * (2/3)\r\n            ];\r\n            previousVertex = randomIndex;\r\n        }\r\n        \r\n        // Main iteration loop\r\n        for (let i = 0; i < this.iterationsCount; i++) {\r\n            // Pick a random vertex\r\n            const randomIndex = Math.floor(Math.random() * 8);\r\n            const targetPoint = this.points[randomIndex];\r\n            \r\n            // Move 2/3 of the way to the chosen vertex\r\n            currentPoint = [\r\n                currentPoint[0] + (targetPoint[0] - currentPoint[0]) * (2/3),\r\n                currentPoint[1] + (targetPoint[1] - currentPoint[1]) * (2/3)\r\n            ];\r\n            \r\n            // Use a color that relates to the vertex chosen\r\n            this.ctx.fillStyle = this.colorPalette[randomIndex % this.colorPalette.length];\r\n            \r\n            // Draw a point (smaller for more detail)\r\n            this.ctx.beginPath();\r\n            this.ctx.rect(currentPoint[0], currentPoint[1], 1, 1);\r\n            this.ctx.fill();\r\n            \r\n            previousVertex = randomIndex;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Sierpinski Carpet fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Sierpinski Carpet',\r\n            description: 'A 2D generalization of the Sierpinski Triangle. This fractal uses 8 vertices arranged in a square pattern and a 2/3 contraction ratio to create a self-similar pattern with a square hole in the middle.',\r\n            formula: 'P_{n+1} = P_n + 2/3(V_i - P_n)\\nwhere V_i is a randomly chosen vertex from the 8 vertices'\r\n        };\r\n    }\r\n} ","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Pentagon Fractal - Creates a fractal using the chaos game method on a regular pentagon\r\n */\r\nexport class PentagonFractal extends ChaosGameBase {\r\n    // Vertices of the pentagon\r\n    private pentagonPoints: Point[] = [];\r\n    private currentPoint: Point;\r\n    private contractionRatio: number = 0.618; // Golden ratio\r\n    private iterations: number = 0;\r\n    \r\n    /**\r\n     * Creates a new Pentagon fractal\r\n     * @param canvasId The canvas ID to draw on\r\n     * @param iterations The number of iterations\r\n     */\r\n    constructor(canvasId: string, iterations: number = 40000) {\r\n        super(canvasId, iterations);\r\n        this.iterationsCount = iterations;\r\n        this.colorPalette = [\r\n            '#3F51B5',\r\n            '#5E35B1',\r\n            '#7B1FA2',\r\n            '#8E24AA',\r\n            '#9C27B0'\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Sets the contraction ratio for the pentagon fractal\r\n     */\r\n    public setContractionRatio(ratio: number): void {\r\n        this.contractionRatio = ratio;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Initialize the pentagon vertices and starting point\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        const centerX = this.canvas.width / 2;\r\n        const centerY = this.canvas.height / 2;\r\n        const radius = Math.min(this.canvas.width, this.canvas.height) * 0.4;\r\n        \r\n        // Create the pentagon vertices (5 points evenly distributed in a circle)\r\n        this.pentagonPoints = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            // Calculate angle for each vertex - starting from the top\r\n            const angle = (Math.PI / 2) + (2 * Math.PI * i / 5);\r\n            this.pentagonPoints.push([\r\n                centerX + radius * Math.cos(angle),\r\n                centerY - radius * Math.sin(angle)\r\n            ]);\r\n        }\r\n        \r\n        // Set starting point to center\r\n        this.currentPoint = [centerX, centerY];\r\n        this.startingPoint = this.currentPoint;\r\n    }\r\n    \r\n    /**\r\n     * Generate the fractal using the chaos game algorithm\r\n     */\r\n    public generate(): void {\r\n        if (!this.ctx) return;\r\n        \r\n        this.initialize();\r\n        this.iterations = 0;\r\n        \r\n        // Skip a few iterations for convergence\r\n        for (let i = 0; i < 20; i++) {\r\n            const randomIndex = Math.floor(Math.random() * 5);\r\n            const target = this.pentagonPoints[randomIndex];\r\n            \r\n            // Apply the chaos game rule: move toward the chosen vertex by contraction ratio\r\n            this.currentPoint = [\r\n                this.currentPoint[0] + this.contractionRatio * (target[0] - this.currentPoint[0]),\r\n                this.currentPoint[1] + this.contractionRatio * (target[1] - this.currentPoint[1])\r\n            ];\r\n        }\r\n        \r\n        // Generate the fractal\r\n        for (let i = 0; i < this.iterationsCount; i++) {\r\n            // Choose a random vertex\r\n            const randomIndex = Math.floor(Math.random() * 5);\r\n            const target = this.pentagonPoints[randomIndex];\r\n            \r\n            // Apply the chaos game rule: move toward the chosen vertex by contraction ratio\r\n            this.currentPoint = [\r\n                this.currentPoint[0] + this.contractionRatio * (target[0] - this.currentPoint[0]),\r\n                this.currentPoint[1] + this.contractionRatio * (target[1] - this.currentPoint[1])\r\n            ];\r\n            \r\n            // Plot the point\r\n            const colorIndex = randomIndex % this.colorPalette.length;\r\n            this.plot(this.currentPoint, 1, this.colorPalette[colorIndex]);\r\n            \r\n            this.iterations++;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Plot a point with specific color\r\n     */\r\n    protected plot(point: Point, size: number = 1, color?: string): void {\r\n        const [x, y] = point;\r\n        this.ctx.fillStyle = color || this.colorPalette[Math.floor(Math.random() * this.colorPalette.length)];\r\n        this.ctx.fillRect(x - size/2, y - size/2, size, size);\r\n    }\r\n    \r\n    /**\r\n     * Return information about the fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Pentagon Fractal',\r\n            description: 'The Pentagon Fractal is created using the chaos game algorithm on a regular pentagon. '\r\n                + 'Starting from a random point, each iteration involves randomly selecting one of the five vertices '\r\n                + 'of the pentagon and moving a fraction of the distance from the current point toward that vertex. '\r\n                + 'This process creates an intricate pattern with five-fold symmetry.\\n\\n'\r\n                + 'With a contraction ratio around 0.618 (the golden ratio), the resulting pattern reveals fascinating '\r\n                + 'pentagonal symmetry and self-similar structures that emerge from the simple iterative process.',\r\n            formula: 'P_{n+1} = P_n + r(V_i - P_n)\\n\\n'\r\n                + 'Where:\\n'\r\n                + '- P_n is the current point\\n'\r\n                + '- V_i is a randomly chosen vertex from the 5 vertices of the pentagon\\n'\r\n                + '- r is the contraction ratio (0.618, the golden ratio)\\n'\r\n                + '- Starting from a point within the pentagon'\r\n        };\r\n    }\r\n} ","import { ChaosGameBase, Point } from './ChaosGameBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of a Fern-like fractal using weighted chaos game\r\n */\r\nexport class FernFractal extends ChaosGameBase {\r\n    private transformations: Array<{\r\n        prob: number;\r\n        a: number;\r\n        b: number;\r\n        c: number;\r\n        d: number;\r\n        e: number;\r\n        f: number;\r\n        color: string;\r\n    }>;\r\n    \r\n    /**\r\n     * Constructor for the Fern fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param iterations - The number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, iterations: number = 50000) {\r\n        super(canvasId, iterations);\r\n        \r\n        // Define the transformations for the Barnsley fern\r\n        this.transformations = [\r\n            { prob: 0.01, a: 0.00, b: 0.00, c: 0.00, d: 0.16, e: 0.00, f: 0.00, color: '#1AFF1A' }, // Stem\r\n            { prob: 0.85, a: 0.85, b: 0.04, c: -0.04, d: 0.85, e: 0.00, f: 1.60, color: '#00CC00' }, // Successive smaller leaflets\r\n            { prob: 0.07, a: 0.20, b: -0.26, c: 0.23, d: 0.22, e: 0.00, f: 1.60, color: '#33FF33' }, // Largest left leaflet\r\n            { prob: 0.07, a: -0.15, b: 0.28, c: 0.26, d: 0.24, e: 0.00, f: 0.44, color: '#00FF00' }  // Largest right leaflet\r\n        ];\r\n        \r\n        // Override the color palette\r\n        this.colorPalette = [\"#00FF00\", \"#33FF33\", \"#66FF66\", \"#99FF99\"];\r\n    }\r\n    \r\n    /**\r\n     * Initialize the Fern fractal\r\n     */\r\n    public initialize(): void {\r\n        super.initialize();\r\n        \r\n        // Clear the canvas\r\n        this.clear();\r\n        \r\n        // Set initial point\r\n        this.startingPoint = [0, 0];\r\n    }\r\n    \r\n    /**\r\n     * Apply a transformation to a point\r\n     */\r\n    private transform(point: Point, tx: any): Point {\r\n        const [x, y] = point;\r\n        return [\r\n            tx.a * x + tx.b * y + tx.e,\r\n            tx.c * x + tx.d * y + tx.f\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Gets a random transformation based on probability weights\r\n     */\r\n    private getRandomTransformation(): any {\r\n        const r = Math.random();\r\n        let sumProb = 0;\r\n        \r\n        for (const tx of this.transformations) {\r\n            sumProb += tx.prob;\r\n            if (r <= sumProb) {\r\n                return tx;\r\n            }\r\n        }\r\n        \r\n        return this.transformations[0];  // Fallback\r\n    }\r\n    \r\n    /**\r\n     * Generates the Fern fractal using the chaos game algorithm with affine transformations\r\n     */\r\n    public generate(): void {\r\n        this.initialize();\r\n        \r\n        let currentPoint = this.startingPoint;\r\n        \r\n        // Skip first 20 iterations (transient phase)\r\n        for (let i = 0; i < 20; i++) {\r\n            const tx = this.getRandomTransformation();\r\n            currentPoint = this.transform(currentPoint, tx);\r\n        }\r\n        \r\n        // Calculate scaling to fit the canvas\r\n        const w = this.canvas.width;\r\n        const h = this.canvas.height;\r\n        const scale = h / 12;  // Fern's height is about 10 units\r\n        const offsetX = w / 2;\r\n        const offsetY = h - 20;  // Position at bottom of canvas\r\n        \r\n        // Main iteration loop\r\n        for (let i = 0; i < this.iterationsCount; i++) {\r\n            // Pick a random transformation based on probability weights\r\n            const tx = this.getRandomTransformation();\r\n            \r\n            // Apply the transformation\r\n            currentPoint = this.transform(currentPoint, tx);\r\n            \r\n            // Map the point to the canvas space\r\n            const canvasX = offsetX + scale * currentPoint[0];\r\n            const canvasY = offsetY - scale * currentPoint[1];  // Y is inverted in canvas\r\n            \r\n            // Use the color associated with the transformation\r\n            this.ctx.fillStyle = tx.color;\r\n            \r\n            // Draw a small point\r\n            this.ctx.beginPath();\r\n            this.ctx.rect(canvasX, canvasY, 1, 1);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Fern fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Barnsley Fern',\r\n            description: 'A fern-like fractal generated using a chaos game with probabilistic affine transformations. Each part of the fern (stem, leaflets) is created by applying specific transformations with varying probabilities.',\r\n            formula: 'x_{n+1} = a_i·x_n + b_i·y_n + e_i\\ny_{n+1} = c_i·x_n + d_i·y_n + f_i\\nwhere i is chosen with probability p_i'\r\n        };\r\n    }\r\n} ","/**\n * FractalCardFactory - Factory for creating fractal cards\n */\n\nimport { FractalBase } from '../fractals/FractalBase';\nimport { FractalControlConfig } from './FractalControlConfig';\nimport { navigateToFractalEditor } from '../services/NavigationService';\nimport { TooltipManager } from './TooltipManager';\n\n/**\n * Interface for fractal card creation options\n */\nexport interface FractalCardOptions {\n    title: string;\n    description: string;\n    formula: string;\n    controlConfigs: FractalControlConfig[];\n    canvasId: string;\n    container: HTMLElement;\n    fractal: FractalBase;\n}\n\n/**\n * Creates a new fractal card and adds it to the specified container\n * @param options Options for creating the fractal card\n */\nexport function createFractalCard(options: FractalCardOptions): void {\n    const { \n        title, \n        description, \n        formula, \n        controlConfigs, \n        canvasId, \n        container, \n        fractal \n    } = options;\n    \n    // Create the card container\n    const card = document.createElement('div');\n    card.className = 'fractal-card';\n    \n    // Create the header\n    const header = document.createElement('div');\n    header.className = 'card-header';\n    \n    const titleElement = document.createElement('h3');\n    titleElement.textContent = title;\n    header.appendChild(titleElement);\n    \n    card.appendChild(header);\n    \n    // Create canvas container\n    const canvasContainer = document.createElement('div');\n    canvasContainer.className = 'canvas-container';\n    \n    // Create canvas element\n    const canvas = document.createElement('canvas');\n    canvas.id = canvasId;\n    canvas.width = 400;\n    canvas.height = 300;\n    canvasContainer.appendChild(canvas);\n    \n    card.appendChild(canvasContainer);\n    \n    // Create controls container\n    const controlsContainer = document.createElement('div');\n    controlsContainer.className = 'fractal-controls';\n    \n    // Add controls\n    controlConfigs.forEach(config => {\n        const controlGroup = document.createElement('div');\n        controlGroup.className = 'control-group';\n        \n        const label = document.createElement('label');\n        label.textContent = config.label || '';\n        label.htmlFor = `${canvasId}-${config.id}`;\n        controlGroup.appendChild(label);\n        \n        const input = document.createElement('input');\n        input.id = `${canvasId}-${config.id}`;\n        \n        if (typeof config.defaultValue === 'number') {\n            // Numeric input type\n            if (config.min !== undefined && config.max !== undefined) {\n                input.type = 'range';\n                input.min = config.min.toString();\n                input.max = config.max.toString();\n                \n                if (config.step !== undefined) {\n                    input.step = config.step.toString();\n                }\n                \n                // Add value display\n                const valueDisplay = document.createElement('span');\n                valueDisplay.className = 'value-display';\n                valueDisplay.textContent = config.defaultValue.toString();\n                controlGroup.appendChild(valueDisplay);\n                \n                // Update value display when input changes\n                input.addEventListener('input', () => {\n                    valueDisplay.textContent = input.value;\n                });\n            } else {\n                input.type = 'number';\n            }\n            \n            input.value = config.defaultValue.toString();\n        } else {\n            // String input type (for select, text, etc.)\n            input.type = 'text';\n            input.value = config.defaultValue.toString();\n        }\n        \n        // Add change handler and automatically generate when value changes\n        input.addEventListener('change', () => {\n            const value = input.type === 'number' || input.type === 'range' \n                ? parseFloat(input.value) \n                : input.value;\n            \n            if (config.onChange) {\n                config.onChange(value);\n                // Automatically generate when value changes (no button needed)\n                fractal.generate();\n            }\n        });\n        \n        // Also generate on input for sliders to provide immediate feedback\n        if (input.type === 'range') {\n            input.addEventListener('input', () => {\n                if (config.onChange) {\n                    config.onChange(parseFloat(input.value));\n                    fractal.generate();\n                }\n            });\n        }\n        \n        controlGroup.appendChild(input);\n        controlsContainer.appendChild(controlGroup);\n    });\n    \n    card.appendChild(controlsContainer);\n    \n    // Add description tooltip\n    const tooltip = document.createElement('div');\n    tooltip.className = 'fractal-tooltip';\n    tooltip.style.display = 'none';\n    \n    const descriptionElement = document.createElement('p');\n    descriptionElement.textContent = description;\n    tooltip.appendChild(descriptionElement);\n    \n    // Create the fractal formula container with improved structure\n    const formulaContainer = document.createElement('div');\n    formulaContainer.className = 'fractal-formula-container';\n    \n    // Add formula title\n    const formulaTitle = document.createElement('div');\n    formulaTitle.className = 'formula-title';\n    formulaTitle.textContent = 'Mathematical Formula';\n    formulaContainer.appendChild(formulaTitle);\n    \n    const formulaElement = document.createElement('pre');\n    formulaElement.className = 'fractal-formula';\n    formulaElement.textContent = formula;\n    formulaContainer.appendChild(formulaElement);\n    \n    // Add copy formula button with smaller size\n    const copyFormulaBtn = document.createElement('button');\n    copyFormulaBtn.className = 'formula-copy-button';\n    copyFormulaBtn.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg> Copy';\n    \n    // Add copy success notification element\n    const copySuccess = document.createElement('div');\n    copySuccess.className = 'formula-copied';\n    copySuccess.textContent = 'Copied!';\n    \n    // Add copy formula functionality\n    copyFormulaBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent tooltip from closing when clicking the button\n        \n        navigator.clipboard.writeText(formula).then(() => {\n            // Show success notification\n            copySuccess.classList.add('visible');\n            \n            // Remove the class after animation completes\n            setTimeout(() => {\n                copySuccess.classList.remove('visible');\n            }, 1500);\n        }).catch(err => {\n            console.error('Could not copy formula:', err);\n        });\n    });\n    \n    // Add elements to formula container\n    formulaContainer.appendChild(copyFormulaBtn);\n    formulaContainer.appendChild(copySuccess);\n    tooltip.appendChild(formulaContainer);\n    \n    card.appendChild(tooltip);\n    \n    // Add hover/click effect for tooltip\n    card.addEventListener('click', (e) => {\n        // Don't show tooltip when clicking on controls\n        if ((e.target as Element).closest('.fractal-controls')) {\n            return;\n        }\n        \n        tooltip.style.display = tooltip.style.display === 'none' ? 'block' : 'none';\n    });\n    \n    // Add editor button at the bottom of the card\n    const editorButton = document.createElement('button');\n    editorButton.className = 'fractal-editor-button-bottom';\n    editorButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path></svg> Open Fractal Editor';\n    editorButton.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent the card click from showing the tooltip\n        // Convert title to URL-friendly ID\n        let fractalId = title.toLowerCase().replace(/\\s+/g, '-');\n        \n        // Fix for non-repeat square fractal\n        if (fractalId === 'non-repeat-square-fractal' || fractalId === 'non-repeat-square') {\n            fractalId = 'nonrepeat-square';\n        }\n        \n        navigateToFractalEditor(fractalId);\n    });\n    card.appendChild(editorButton);\n    \n    // Add card to container\n    container.appendChild(card);\n    \n    // Initialize the fractal\n    fractal.initialize();\n    fractal.generate();\n} ","/**\r\n * FractalControlConfig - Extended control configuration for fractal UI\r\n */\r\n\r\nimport { ControlConfig } from './ControlConfig';\r\n\r\n/**\r\n * Extended control configuration with onChange handler for fractal UI\r\n */\r\nexport interface FractalControlConfig extends ControlConfig {\r\n    /**\r\n     * Change handler function\r\n     * @param value The new value of the control\r\n     */\r\n    onChange?: (value: any) => void;\r\n}\r\n\r\n/**\r\n * Creates a standard iteration control\r\n * @param onChange Callback function when value changes\r\n * @returns Control configuration for iterations\r\n */\r\nexport function createIterationsControl(onChange: (value: number) => void): FractalControlConfig {\r\n    return {\r\n        id: 'iterations',\r\n        label: 'Iterations',\r\n        min: 1000,\r\n        max: 100000,\r\n        step: 1000,\r\n        defaultValue: 10000,\r\n        type: 'range',\r\n        onChange: onChange\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a standard max iterations control for mathematical fractals\r\n * @param onChange Callback function when value changes\r\n * @returns Control configuration for max iterations\r\n */\r\nexport function createMaxIterationsControl(onChange: (value: number) => void): FractalControlConfig {\r\n    return {\r\n        id: 'maxIterations',\r\n        label: 'Max Iterations',\r\n        min: 10,\r\n        max: 1000,\r\n        step: 10,\r\n        defaultValue: 100,\r\n        type: 'range',\r\n        onChange: onChange\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a standard zoom control for mathematical fractals\r\n * @param onChange Callback function when value changes\r\n * @returns Control configuration for zoom\r\n */\r\nexport function createZoomControl(onChange: (value: number) => void): FractalControlConfig {\r\n    return {\r\n        id: 'zoom',\r\n        label: 'Zoom Level',\r\n        min: 0.1,\r\n        max: 10,\r\n        step: 0.1,\r\n        defaultValue: 1,\r\n        type: 'range',\r\n        onChange: onChange\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a complex parameter control\r\n * @param id Control identifier\r\n * @param label Display label\r\n * @param defaultValue Default value\r\n * @param onChange Callback function when value changes\r\n * @returns Control configuration for complex parameter\r\n */\r\nexport function createComplexParamControl(\r\n    id: string,\r\n    label: string,\r\n    defaultValue: number,\r\n    onChange: (value: number) => void\r\n): FractalControlConfig {\r\n    return {\r\n        id,\r\n        label,\r\n        min: -2,\r\n        max: 2,\r\n        step: 0.01,\r\n        defaultValue,\r\n        type: 'range',\r\n        onChange\r\n    };\r\n}\r\n\r\n/**\r\n * Interface for slider control options\r\n */\r\nexport interface SliderControlOptions {\r\n    id: string;\r\n    label: string;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    defaultValue: number;\r\n    callback: (value: number) => void;\r\n}\r\n\r\n/**\r\n * Creates a custom slider control with specified parameters\r\n * @param options The slider control options\r\n * @returns Control configuration for custom slider\r\n */\r\nexport function createSliderControl(options: SliderControlOptions): FractalControlConfig {\r\n    return {\r\n        id: options.id,\r\n        label: options.label,\r\n        min: options.min,\r\n        max: options.max,\r\n        step: options.step,\r\n        defaultValue: options.defaultValue,\r\n        type: 'range',\r\n        onChange: options.callback\r\n    };\r\n} ","import { MathFractalBase } from './MathFractalBase';\nimport { Complex } from '../Complex';\nimport { FractalInfo } from '../FractalBase';\n\n/**\n * Implementation of the Mandelbrot Set fractal\n */\nexport class MandelbrotFractal extends MathFractalBase {\n    /**\n     * Constructor for the Mandelbrot fractal\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param maxIterations - The maximum number of iterations to perform\n     */\n    constructor(canvasId: string, maxIterations: number = 100) {\n        super(canvasId, maxIterations);\n        this.centerX = -0.5; // Center of the Mandelbrot set\n        this.centerY = 0;\n    }\n    \n    /**\n     * Generates the Mandelbrot set fractal\n     */\n    public generate(): void {\n        this.clear();\n        \n        if (!this.canvas || !this.ctx) {\n            this.initialize();\n        }\n        \n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const imageData = this.ctx.createImageData(width, height);\n        const data = imageData.data;\n        \n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const c = this.mapToComplex(x, y);\n                let z = new Complex(0, 0);\n                \n                let iterations = 0;\n                let smooth = 0;\n                \n                // Mandelbrot iteration: z = z^2 + c\n                while (iterations < this.maxIterations && z.abs() < 2) {\n                    z = z.square().add(c);\n                    iterations++;\n                }\n                \n                // Smooth coloring logarithmic bands\n                if (iterations < this.maxIterations) {\n                    smooth = z.abs();\n                }\n                \n                // Get color\n                if (iterations === this.maxIterations) {\n                    // Point is in the set - black\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\n                } else {\n                    // Point is outside the set - color based on how quickly it escaped\n                    const hue = (360 * iterations / this.maxIterations) % 360;\n                    const saturation = 100;\n                    const lightness = 50;\n                    \n                    // Convert HSL to RGB\n                    const [r, g, b] = this.hslToRgb(hue/360, saturation/100, lightness/100);\n                    this.setPixelDirectColor(data, x, y, width, \n                        Math.round(r * 255), \n                        Math.round(g * 255), \n                        Math.round(b * 255));\n                }\n            }\n        }\n        \n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    /**\n     * Returns information about the Mandelbrot fractal\n     */\n    public getInfo(): FractalInfo {\n        return {\n            title: 'Mandelbrot Set',\n            description: 'The famous Mandelbrot set is formed by iterating z = z² + c and observing which complex values of c cause the sequence to remain bounded.',\n            formula: 'z_{n+1} = z_n^2 + c\\nz_0 = 0\\nSet contains c where |z_n| remains bounded as n→∞'\n        };\n    }\n} ","import { MathFractalBase } from './MathFractalBase';\nimport { Complex } from '../Complex';\nimport { FractalInfo } from '../FractalBase';\n\n/**\n * Implementation of the Julia Set fractal\n */\nexport class JuliaFractal extends MathFractalBase {\n    private juliaConstant: Complex;\n    \n    /**\n     * Constructor for the Julia fractal\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param maxIterations - The maximum number of iterations to perform\n     */\n    constructor(canvasId: string, maxIterations: number = 100) {\n        super(canvasId, maxIterations);\n        this.juliaConstant = new Complex(-0.7, 0.27); // Default value for interesting Julia set\n    }\n    \n    /**\n     * Sets the complex parameter for the Julia set\n     * \n     * @param real - Real part of the complex parameter\n     * @param imag - Imaginary part of the complex parameter\n     */\n    public setParameters(real: number, imag: number): void {\n        this.juliaConstant = new Complex(real, imag);\n        this.generate();\n    }\n    \n    /**\n     * Generates the Julia set fractal\n     */\n    public generate(): void {\n        this.clear();\n        \n        if (!this.canvas || !this.ctx) {\n            this.initialize();\n        }\n        \n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const imageData = this.ctx.createImageData(width, height);\n        const data = imageData.data;\n        \n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                // Map canvas coordinates to complex plane\n                let z = this.mapToComplex(x, y);\n                \n                let iterations = 0;\n                \n                // Julia set iteration: z = z^2 + c, where c is a constant\n                while (iterations < this.maxIterations && z.abs() < 2) {\n                    z = z.square().add(this.juliaConstant);\n                    iterations++;\n                }\n                \n                if (iterations === this.maxIterations) {\n                    // Point is in the set - black\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\n                } else {\n                    // Point is outside the set - color based on how quickly it escaped\n                    // Use a smooth coloring algorithm\n                    const smoothColor = (iterations + 1 - Math.log2(Math.log2(z.abs()))) / this.maxIterations;\n                    const hue = ((360 * smoothColor) % 360) / 360;\n                    const saturation = 0.8;\n                    const lightness = 0.5;\n                    \n                    // Convert HSL to RGB for direct color setting\n                    const [r, g, b] = this.hslToRgb(hue, saturation, lightness);\n                    \n                    this.setPixelDirectColor(data, x, y, width, \n                        Math.round(r * 255), \n                        Math.round(g * 255), \n                        Math.round(b * 255));\n                }\n            }\n        }\n        \n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    /**\n     * Returns information about the Julia fractal\n     */\n    public getInfo(): FractalInfo {\n        return {\n            title: 'Julia Set',\n            description: 'Julia sets are related to the Mandelbrot set, but with a fixed complex parameter. Different parameters create wildly different patterns.',\n            formula: 'z_{n+1} = z_n^2 + c\\nwhere c is fixed and z_0 is the point being tested'\n        };\n    }\n} ","import { MathFractalBase } from './MathFractalBase';\nimport { Complex } from '../Complex';\nimport { FractalInfo } from '../FractalBase';\n\n/**\n * Implementation of the Burning Ship Fractal\n */\nexport class BurningShipFractal extends MathFractalBase {\n    /**\n     * Constructor for the Burning Ship fractal\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param maxIterations - The maximum number of iterations to perform\n     */\n    constructor(canvasId: string, maxIterations: number = 100) {\n        super(canvasId, maxIterations);\n        this.centerX = -0.5;\n        this.centerY = -0.5;\n    }\n    \n    /**\n     * Generates the Burning Ship fractal\n     */\n    public generate(): void {\n        this.clear();\n        \n        if (!this.canvas || !this.ctx) {\n            this.initialize();\n        }\n        \n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const imageData = this.ctx.createImageData(width, height);\n        const data = imageData.data;\n        \n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const c = this.mapToComplex(x, y);\n                let z = new Complex(0, 0);\n                \n                let iterations = 0;\n                \n                // Burning Ship iteration: z = (|Re(z)| + i|Im(z)|)^2 + c\n                while (iterations < this.maxIterations && z.abs() < 2) {\n                    // Take absolute value of real and imaginary parts before squaring\n                    const absRe = Math.abs(z.real);\n                    const absIm = Math.abs(z.imag);\n                    \n                    const zAbs = new Complex(absRe, absIm);\n                    z = zAbs.square().add(c);\n                    \n                    iterations++;\n                }\n                \n                if (iterations === this.maxIterations) {\n                    // Point is in the set - black\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\n                } else {\n                    // Point is outside the set - create a fiery color scheme\n                    // Use a smooth coloring algorithm\n                    const smoothColor = iterations + 1 - Math.log2(Math.log2(z.abs()));\n                    const normalized = smoothColor / this.maxIterations;\n                    \n                    // Fiery color scheme\n                    let r, g, b;\n                    \n                    if (normalized < 0.5) {\n                        // Black to red\n                        r = Math.floor(normalized * 2 * 255);\n                        g = 0;\n                        b = 0;\n                    } else if (normalized < 0.75) {\n                        // Red to yellow\n                        r = 255;\n                        g = Math.floor((normalized - 0.5) * 4 * 255);\n                        b = 0;\n                    } else {\n                        // Yellow to white\n                        r = 255;\n                        g = 255;\n                        b = Math.floor((normalized - 0.75) * 4 * 255);\n                    }\n                    \n                    this.setPixelDirectColor(data, x, y, width, r, g, b);\n                }\n            }\n        }\n        \n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    /**\n     * Returns information about the Burning Ship fractal\n     */\n    public getInfo(): FractalInfo {\n        return {\n            title: 'Burning Ship Fractal',\n            description: 'The Burning Ship fractal modifies the Mandelbrot formula by taking the absolute value of real and imaginary components before squaring.',\n            formula: 'z_{n+1} = (|Re(z_n)| + i|Im(z_n)|)^2 + c\\nz_0 = 0'\n        };\n    }\n} ","import { MathFractalBase } from './MathFractalBase';\r\nimport { Complex } from '../Complex';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of Newton's method fractal\r\n */\r\nexport class NewtonFractal extends MathFractalBase {\r\n    private power: number = 3;\r\n    \r\n    /**\r\n     * Constructor for the Newton fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param maxIterations - The maximum number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, maxIterations: number = 30) {\r\n        super(canvasId, maxIterations);\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n    }\r\n    \r\n    /**\r\n     * Set the power for the polynomial\r\n     */\r\n    public setPower(power: number): void {\r\n        this.power = power;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Generates the Newton fractal\r\n     */\r\n    public generate(): void {\r\n        this.clear();\r\n        \r\n        if (!this.canvas || !this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        const imageData = this.ctx.createImageData(width, height);\r\n        const data = imageData.data;\r\n        \r\n        // Precompute the roots of the polynomial z^n - 1\r\n        const roots: Complex[] = [];\r\n        for (let i = 0; i < this.power; i++) {\r\n            const angle = (2 * Math.PI * i) / this.power;\r\n            roots.push(new Complex(Math.cos(angle), Math.sin(angle)));\r\n        }\r\n        \r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const z0 = this.mapToComplex(x, y);\r\n                let z = z0.copy();\r\n                \r\n                // Newton's method iterations\r\n                let iterations = 0;\r\n                let rootIndex = -1;\r\n                \r\n                for (iterations = 0; iterations < this.maxIterations; iterations++) {\r\n                    // f(z) = z^n - 1\r\n                    // f'(z) = n * z^(n-1)\r\n                    \r\n                    // Newton's method: z = z - f(z) / f'(z)\r\n                    const zPower = z.pow(this.power);\r\n                    const numerator = zPower.subtract(new Complex(1, 0));\r\n                    const denominator = new Complex(this.power, 0).multiply(z.pow(this.power - 1));\r\n                    \r\n                    const fraction = numerator.divide(denominator);\r\n                    const newZ = z.subtract(fraction);\r\n                    \r\n                    // Check if we're close to any root\r\n                    for (let i = 0; i < roots.length; i++) {\r\n                        if (newZ.subtract(roots[i]).abs() < 1e-6) {\r\n                            rootIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    if (rootIndex != -1) break;\r\n                    \r\n                    // Check if we're converging\r\n                    if (z.subtract(newZ).abs() < 1e-10) {\r\n                        // Find closest root\r\n                        let minDist = Infinity;\r\n                        for (let i = 0; i < roots.length; i++) {\r\n                            const dist = newZ.subtract(roots[i]).abs();\r\n                            if (dist < minDist) {\r\n                                minDist = dist;\r\n                                rootIndex = i;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    \r\n                    z = newZ;\r\n                }\r\n                \r\n                if (rootIndex != -1) {\r\n                    // Color based on which root we converged to\r\n                    const hue = (360 * rootIndex / this.power) % 360;\r\n                    const saturation = 100;\r\n                    // Adjust lightness based on iterations\r\n                    const lightness = 50 - (iterations / this.maxIterations) * 30;\r\n                    \r\n                    const [r, g, b] = this.hslToRgb(hue/360, saturation/100, lightness/100);\r\n                    this.setPixelDirectColor(data, x, y, width, \r\n                        Math.round(r * 255), \r\n                        Math.round(g * 255), \r\n                        Math.round(b * 255));\r\n                } else {\r\n                    // Black for non-converging points\r\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Newton fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Newton Fractal',\r\n            description: 'Visualizes Newton\\'s method for finding roots of complex polynomials. Colors represent which root the algorithm converges to.',\r\n            formula: 'z_{n+1} = z_n - f(z_n)/f\\'(z_n)\\nwhere f(z) = z^n - 1'\r\n        };\r\n    }\r\n} ","import { MathFractalBase } from './MathFractalBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Lyapunov fractal\r\n */\r\nexport class LyapunovFractal extends MathFractalBase {\r\n    private sequence: string = 'AB';\r\n    \r\n    /**\r\n     * Constructor for the Lyapunov fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param maxIterations - The maximum number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, maxIterations: number = 100) {\r\n        super(canvasId, maxIterations);\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n    }\r\n    \r\n    /**\r\n     * Set the sequence string\r\n     */\r\n    public setSequence(sequence: string): void {\r\n        this.sequence = sequence.toUpperCase();\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Generates the Lyapunov fractal\r\n     */\r\n    public generate(): void {\r\n        this.clear();\r\n        \r\n        if (!this.canvas || !this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        const imageData = this.ctx.createImageData(width, height);\r\n        const data = imageData.data;\r\n        \r\n        // Define the range for r values\r\n        const minA = 2.0;\r\n        const maxA = 4.0;\r\n        const minB = 2.0;\r\n        const maxB = 4.0;\r\n        \r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                // Map canvas coordinates to parameter space\r\n                const a = minA + (maxA - minA) * x / width;\r\n                const b = minB + (maxB - minB) * (height - y) / height;\r\n                \r\n                // Calculate Lyapunov exponent\r\n                const lyapunov = this.calculateLyapunovExponent(a, b);\r\n                \r\n                // Color based on Lyapunov exponent\r\n                if (isNaN(lyapunov)) {\r\n                    // Black for undefined\r\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\r\n                } else if (lyapunov < 0) {\r\n                    // Stable (negative exponent) - blue to green scale\r\n                    const intensity = Math.min(1.0, Math.abs(lyapunov / 2));\r\n                    const r = 0;\r\n                    const g = Math.round(255 * intensity);\r\n                    const b = Math.round(255 * (1 - intensity));\r\n                    this.setPixelDirectColor(data, x, y, width, r, g, b);\r\n                } else {\r\n                    // Chaotic (positive exponent) - yellow to red scale\r\n                    const intensity = Math.min(1.0, lyapunov);\r\n                    const r = 255;\r\n                    const g = Math.round(255 * (1 - intensity));\r\n                    const b = 0;\r\n                    this.setPixelDirectColor(data, x, y, width, r, g, b);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    \r\n    /**\r\n     * Calculate the Lyapunov exponent for given parameters\r\n     */\r\n    private calculateLyapunovExponent(a: number, b: number): number {\r\n        // Initial value\r\n        let x = 0.5;\r\n        \r\n        // Parameters array based on the sequence\r\n        const rValues: number[] = [];\r\n        for (let i = 0; i < this.sequence.length; i++) {\r\n            rValues.push(this.sequence[i] === 'A' ? a : b);\r\n        }\r\n        \r\n        // Warmup iterations to get on the attractor\r\n        const warmup = Math.min(100, this.maxIterations / 2);\r\n        for (let i = 0; i < warmup; i++) {\r\n            const r = rValues[i % rValues.length];\r\n            x = r * x * (1 - x);\r\n            if (x <= 0 || x >= 1 || isNaN(x)) {\r\n                return NaN; // Diverged\r\n            }\r\n        }\r\n        \r\n        // Calculate Lyapunov exponent\r\n        let sum = 0;\r\n        for (let i = 0; i < this.maxIterations; i++) {\r\n            const r = rValues[i % rValues.length];\r\n            const derivative = Math.abs(r * (1 - 2 * x));\r\n            sum += Math.log(derivative);\r\n            \r\n            // Next iteration\r\n            x = r * x * (1 - x);\r\n            if (x <= 0 || x >= 1 || isNaN(x)) {\r\n                return NaN; // Diverged\r\n            }\r\n        }\r\n        \r\n        return sum / this.maxIterations;\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Lyapunov fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Lyapunov Fractal',\r\n            description: 'Maps the stability of a dynamical system with regions of chaos (positive exponents) and stability (negative exponents).',\r\n            formula: 'x_{n+1} = r·x_n·(1-x_n)\\nLyapunov exponent: λ = lim_{n→∞} (1/n)∑ln|r(1-2x_k)|'\r\n        };\r\n    }\r\n} ","import { MathFractalBase } from './MathFractalBase';\r\nimport { Complex } from '../Complex';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Phoenix fractal\r\n */\r\nexport class PhoenixFractal extends MathFractalBase {\r\n    private p: number = 0.56;\r\n    \r\n    /**\r\n     * Constructor for the Phoenix fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param maxIterations - The maximum number of iterations to perform\r\n     */\r\n    constructor(canvasId: string, maxIterations: number = 100) {\r\n        super(canvasId, maxIterations);\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n        this.zoom = 0.8;\r\n    }\r\n    \r\n    /**\r\n     * Set the parameter 'p' for the Phoenix fractal\r\n     */\r\n    public setParameter(p: number): void {\r\n        this.p = p;\r\n        this.generate();\r\n    }\r\n    \r\n    /**\r\n     * Generates the Phoenix fractal\r\n     */\r\n    public generate(): void {\r\n        this.clear();\r\n        \r\n        if (!this.canvas || !this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        const imageData = this.ctx.createImageData(width, height);\r\n        const data = imageData.data;\r\n        \r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const c = this.mapToComplex(x, y);\r\n                \r\n                // Initial values\r\n                let z = new Complex(0, 0);\r\n                let zPrev = new Complex(0, 0);\r\n                \r\n                let iterations = 0;\r\n                let smooth = 0;\r\n                \r\n                // Phoenix iteration: z = z^2 + c + p*zPrev\r\n                while (iterations < this.maxIterations && z.abs() < 4) {\r\n                    // Store previous z for next iteration\r\n                    const zTemp = z;\r\n                    \r\n                    // Phoenix formula\r\n                    z = z.square().add(c).add(zPrev.multiply(new Complex(this.p, 0)));\r\n                    zPrev = zTemp;\r\n                    \r\n                    iterations++;\r\n                }\r\n                \r\n                // Log escape time for smooth coloring\r\n                if (iterations < this.maxIterations) {\r\n                    const log_zn = Math.log(z.abs()) / 2;\r\n                    const nu = Math.log(log_zn / Math.log(2)) / Math.log(2);\r\n                    smooth = iterations + 1 - nu;\r\n                }\r\n                \r\n                // Get color\r\n                if (iterations === this.maxIterations) {\r\n                    // Point is in the set - black\r\n                    this.setPixelDirectColor(data, x, y, width, 0, 0, 0);\r\n                } else {\r\n                    // Point is outside the set - color based on escape time\r\n                    // Use a fire-like palette for phoenix\r\n                    const t = smooth / this.maxIterations;\r\n                    \r\n                    // Fire color palette\r\n                    const r = Math.min(255, Math.round(255 * Math.pow(t, 0.5)));\r\n                    const g = Math.min(255, Math.round(128 * Math.pow(t, 0.8)));\r\n                    const b = Math.min(255, Math.round(64 * Math.pow(t, 2)));\r\n                    \r\n                    this.setPixelDirectColor(data, x, y, width, r, g, b);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    \r\n    /**\r\n     * Returns information about the Phoenix fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Phoenix Fractal',\r\n            description: 'A generalization of the Mandelbrot set that incorporates previous iteration values, creating flame-like patterns.',\r\n            formula: 'z_{n+1} = z_n^2 + c + p·z_{n-1}\\nwhere p is a complex parameter'\r\n        };\r\n    }\r\n} ","import { MathFractalBase } from './MathFractalBase';\r\nimport { FractalInfo } from '../FractalBase';\r\n\r\n/**\r\n * Implementation of the Koch Snowflake fractal\r\n */\r\nexport class KochSnowflakeFractal extends MathFractalBase {\r\n    private depth: number = 4;\r\n    private size: number = 300;\r\n    protected needsRedraw: boolean = true;\r\n    \r\n    /**\r\n     * Constructor for the Koch Snowflake fractal\r\n     * \r\n     * @param canvasId - The ID of the canvas element to render on\r\n     * @param depth - The recursion depth of the Koch snowflake\r\n     */\r\n    constructor(canvasId: string, depth: number = 4) {\r\n        super(canvasId, depth);\r\n        this.depth = depth;\r\n        this.zoom = 1.0; // Default zoom level\r\n    }\r\n    \r\n    /**\r\n     * Set the size of the snowflake\r\n     * @param size - The size value\r\n     */\r\n    public setSize(size: number): void {\r\n        this.size = size;\r\n        this.needsRedraw = true;\r\n    }\r\n    \r\n    /**\r\n     * Draw a single Koch curve segment\r\n     * @param ctx - The rendering context\r\n     * @param x1 - Start x coordinate\r\n     * @param y1 - Start y coordinate\r\n     * @param x2 - End x coordinate\r\n     * @param y2 - End y coordinate\r\n     * @param depth - Current recursion depth\r\n     */\r\n    private drawKochCurve(\r\n        ctx: CanvasRenderingContext2D, \r\n        x1: number, \r\n        y1: number, \r\n        x2: number, \r\n        y2: number, \r\n        depth: number\r\n    ): void {\r\n        if (depth === 0) {\r\n            // Base case: draw a straight line\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n            return;\r\n        }\r\n        \r\n        // Calculate the positions of the 4 new points\r\n        // Vector from start to end\r\n        const dx = x2 - x1;\r\n        const dy = y2 - y1;\r\n        \r\n        // First third point\r\n        const x3 = x1 + dx / 3;\r\n        const y3 = y1 + dy / 3;\r\n        \r\n        // Last third point\r\n        const x4 = x1 + 2 * dx / 3;\r\n        const y4 = y1 + 2 * dy / 3;\r\n        \r\n        // Middle point (creating the \"bump\")\r\n        // Rotate the vector (dx/3, dy/3) by 60 degrees counterclockwise\r\n        const angle = Math.PI / 3; // 60 degrees\r\n        const xMiddle = x3 + Math.cos(angle) * dx / 3 - Math.sin(angle) * dy / 3;\r\n        const yMiddle = y3 + Math.sin(angle) * dx / 3 + Math.cos(angle) * dy / 3;\r\n        \r\n        // Recursively draw the 4 segments\r\n        this.drawKochCurve(ctx, x1, y1, x3, y3, depth - 1);\r\n        this.drawKochCurve(ctx, x3, y3, xMiddle, yMiddle, depth - 1);\r\n        this.drawKochCurve(ctx, xMiddle, yMiddle, x4, y4, depth - 1);\r\n        this.drawKochCurve(ctx, x4, y4, x2, y2, depth - 1);\r\n    }\r\n    \r\n    /**\r\n     * Generates the Koch Snowflake fractal\r\n     */\r\n    public generate(): void {\r\n        this.clear();\r\n        \r\n        if (!this.canvas || !this.ctx) {\r\n            this.initialize();\r\n        }\r\n        \r\n        const width = this.canvas.width;\r\n        const height = this.canvas.height;\r\n        \r\n        // Calculate the size based on zoom\r\n        const size = Math.min(width, height) * 0.7 * this.zoom;\r\n        \r\n        // Calculate the vertices of the equilateral triangle\r\n        const centerX = width / 2;\r\n        const centerY = height / 2;\r\n        \r\n        // Height of the equilateral triangle = size * sin(60°)\r\n        const triangleHeight = size * Math.sin(Math.PI / 3);\r\n        \r\n        // The three points of the initial equilateral triangle\r\n        const x1 = centerX;                     // Top point\r\n        const y1 = centerY - triangleHeight / 2;\r\n        \r\n        const x2 = centerX - size / 2;          // Bottom left\r\n        const y2 = centerY + triangleHeight / 2;\r\n        \r\n        const x3 = centerX + size / 2;          // Bottom right\r\n        const y3 = centerY + triangleHeight / 2;\r\n        \r\n        // Set stroke style\r\n        this.ctx.strokeStyle = '#00ffff';\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Draw the three sides of the triangle\r\n        this.drawKochCurve(this.ctx, x1, y1, x2, y2, this.depth);\r\n        this.drawKochCurve(this.ctx, x2, y2, x3, y3, this.depth);\r\n        this.drawKochCurve(this.ctx, x3, y3, x1, y1, this.depth);\r\n    }\r\n    \r\n    /**\r\n     * Get information about this fractal\r\n     */\r\n    public getInfo(): FractalInfo {\r\n        return {\r\n            title: 'Koch Snowflake',\r\n            description: 'A classic fractal that starts with an equilateral triangle and recursively replaces the middle third of each line segment with a triangular bump.',\r\n            formula: 'Recursive geometric construction'\r\n        };\r\n    }\r\n} ","/**\n * Fractal Dashboard - Main application entry point\n */\n\nimport './styles/main.css';\nimport './styles/components.css';\nimport { initDashboard } from './src/components/Dashboard';\nimport { RestrictedSquareFractal } from './src/fractals/chaos-game/RestrictedSquareFractal';\nimport { TriangleFractal } from './src/fractals/chaos-game/TriangleFractal';\nimport { MandelbrotFractal } from './src/fractals/mathematical/MandelbrotFractal';\nimport { AdjacentRestrictionFractal } from './src/fractals/chaos-game/AdjacentRestrictionFractal';\nimport { ModifiedSquareFractal } from './src/fractals/chaos-game/ModifiedSquareFractal';\nimport { NonRepeatSquareFractal } from './src/fractals/chaos-game/NonRepeatSquareFractal';\nimport { SierpinskiCarpet } from './src/fractals/chaos-game/SierpinskiCarpet';\nimport { PentagonFractal } from './src/fractals/chaos-game/PentagonFractal';\nimport { FernFractal } from './src/fractals/chaos-game/FernFractal';\nimport { KochSnowflakeFractal } from './src/fractals/mathematical/KochSnowflakeFractal';\n\nconsole.log('Application starting...');\n\n// Initialize particles.js\nfunction initParticles() {\n    if (typeof (window as any).particlesJS !== 'undefined') {\n        console.log(\"Initializing particles.js\");\n        (window as any).particlesJS('particles-js', {\n            \"particles\": {\n                \"number\": { \"value\": 80, \"density\": { \"enable\": true, \"value_area\": 800 } },\n                \"color\": { \"value\": \"#ffffff\" },\n                \"shape\": {\n                    \"type\": \"circle\",\n                    \"stroke\": { \"width\": 0, \"color\": \"#000000\" },\n                    \"polygon\": { \"nb_sides\": 5 }\n                },\n                \"opacity\": {\n                    \"value\": 0.5,\n                    \"random\": false,\n                    \"anim\": { \"enable\": false, \"speed\": 1, \"opacity_min\": 0.1, \"sync\": false }\n                },\n                \"size\": {\n                    \"value\": 3,\n                    \"random\": true,\n                    \"anim\": { \"enable\": false, \"speed\": 40, \"size_min\": 0.1, \"sync\": false }\n                },\n                \"line_linked\": {\n                    \"enable\": true,\n                    \"distance\": 150,\n                    \"color\": \"#ffffff\",\n                    \"opacity\": 0.4,\n                    \"width\": 1\n                },\n                \"move\": {\n                    \"enable\": true,\n                    \"speed\": 2,\n                    \"direction\": \"none\",\n                    \"random\": true,\n                    \"straight\": false,\n                    \"out_mode\": \"out\",\n                    \"bounce\": false,\n                    \"attract\": { \"enable\": false, \"rotateX\": 600, \"rotateY\": 1200 }\n                }\n            },\n            \"interactivity\": {\n                \"detect_on\": \"canvas\",\n                \"events\": {\n                    \"onhover\": { \"enable\": true, \"mode\": \"grab\" },\n                    \"onclick\": { \"enable\": true, \"mode\": \"push\" },\n                    \"resize\": true\n                },\n                \"modes\": {\n                    \"grab\": { \"distance\": 140, \"line_linked\": { \"opacity\": 1 } },\n                    \"bubble\": { \"distance\": 400, \"size\": 40, \"duration\": 2, \"opacity\": 8, \"speed\": 3 },\n                    \"repulse\": { \"distance\": 200, \"duration\": 0.4 },\n                    \"push\": { \"particles_nb\": 4 },\n                    \"remove\": { \"particles_nb\": 2 }\n                }\n            },\n            \"retina_detect\": true\n        });\n    } else {\n        console.log(\"particlesJS is undefined\");\n    }\n}\n\n// Initialize the Restricted Square fractal on the editor page\nfunction initRestrictedSquareFractal(iterations: number = 10000): void {\n    const canvasId = 'restricted-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Restricted Square fractal with ${iterations} iterations`);\n    \n    const fractal = new RestrictedSquareFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Sierpinski Triangle fractal on the editor page\nfunction initSierpinskiTriangle(iterations: number = 10000, animate: boolean = false, speed: number = 100): void {\n    const canvasId = 'triangle-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Sierpinski Triangle fractal with ${iterations} iterations${animate ? ' (animated)' : ''}`);\n    \n    const fractal = new TriangleFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate(animate, speed);\n}\n\n// Initialize the Mandelbrot Set fractal on the editor page\nfunction initMandelbrotSet(iterations: number = 100): void {\n    const canvasId = 'mandelbrot-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Mandelbrot Set fractal with ${iterations} iterations`);\n    \n    const fractal = new MandelbrotFractal(canvasId);\n    fractal.setMaxIterations(iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Adjacent Restriction fractal on the editor page\nfunction initAdjacentRestrictionFractal(iterations: number = 20000, animate: boolean = false, speed: number = 100): void {\n    const canvasId = 'adjacent-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Adjacent Restriction fractal with ${iterations} iterations${animate ? ' (animated)' : ''}`);\n    \n    const fractal = new AdjacentRestrictionFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate(animate, speed);\n}\n\n// Initialize the Modified Square fractal on the editor page\nfunction initModifiedSquareFractal(iterations: number = 50000): void {\n    const canvasId = 'modified-square-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Modified Square fractal with ${iterations} iterations`);\n    \n    const fractal = new ModifiedSquareFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Non-Repeat Square fractal on the editor page\nfunction initNonRepeatSquareFractal(iterations: number = 20000): void {\n    const canvasId = 'nonrepeat-square-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Non-Repeat Square fractal with ${iterations} iterations`);\n    \n    const fractal = new NonRepeatSquareFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Sierpinski Carpet fractal on the editor page\nfunction initSierpinskiCarpet(iterations: number = 50000): void {\n    const canvasId = 'sierpinski-carpet-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Sierpinski Carpet fractal with ${iterations} iterations`);\n    \n    const fractal = new SierpinskiCarpet(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Pentagon fractal on the editor page\nfunction initPentagonFractal(iterations: number = 40000): void {\n    const canvasId = 'pentagon-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Pentagon fractal with ${iterations} iterations`);\n    \n    const fractal = new PentagonFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Barnsley Fern fractal on the editor page\nfunction initFernFractal(iterations: number = 50000): void {\n    const canvasId = 'fern-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Barnsley Fern fractal with ${iterations} iterations`);\n    \n    const fractal = new FernFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Koch Snowflake fractal on the editor page\nfunction initKochSnowflake(iterations: number = 4): void {\n    const canvasId = 'koch-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Koch Snowflake fractal with ${iterations} iterations`);\n    \n    const fractal = new KochSnowflakeFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize the Phoenix fractal on the editor page\nfunction initPhoenixFractal(iterations: number = 100): void {\n    const canvasId = 'phoenix-canvas';\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!canvas) {\n        console.error(`Canvas element with ID '${canvasId}' not found`);\n        return;\n    }\n    \n    console.log(`Initializing Phoenix fractal with ${iterations} iterations`);\n    \n    const fractal = new PhoenixFractal(canvasId, iterations);\n    fractal.initialize();\n    fractal.generate();\n}\n\n// Initialize a fractal page based on the fractal type\nfunction initFractalPage(fractalType: string): void {\n    console.log(`Initializing fractal page for: ${fractalType}`);\n    \n    switch (fractalType) {\n        case 'restricted-square':\n            initRestrictedSquareFractal();\n            break;\n        case 'sierpinski-triangle':\n            initSierpinskiTriangle();\n            break;\n        case 'mandelbrot-set':\n            initMandelbrotSet();\n            break;\n        case 'adjacent-restriction':\n            initAdjacentRestrictionFractal();\n            break;\n        case 'modified-square':\n            initModifiedSquareFractal();\n            break;\n        case 'nonrepeat-square':\n            initNonRepeatSquareFractal();\n            break;\n        case 'sierpinski-carpet':\n            initSierpinskiCarpet();\n            break;\n        case 'pentagon-fractal':\n            initPentagonFractal();\n            break;\n        case 'barnsley-fern':\n            initFernFractal();\n            break;\n        case 'koch-snowflake':\n            initKochSnowflake();\n            break;\n        case 'phoenix-fractal':\n            initPhoenixFractal();\n            break;\n        default:\n            console.error(`Unknown fractal type: ${fractalType}`);\n    }\n}\n\n// Expose these functions to the global window object for use in HTML pages\n(window as any).initRestrictedSquareFractal = initRestrictedSquareFractal;\n(window as any).initSierpinskiTriangle = initSierpinskiTriangle;\n(window as any).initMandelbrotSet = initMandelbrotSet;\n(window as any).initAdjacentRestrictionFractal = initAdjacentRestrictionFractal;\n(window as any).initModifiedSquareFractal = initModifiedSquareFractal;\n(window as any).initNonRepeatSquareFractal = initNonRepeatSquareFractal;\n(window as any).initSierpinskiCarpet = initSierpinskiCarpet;\n(window as any).initPentagonFractal = initPentagonFractal;\n(window as any).initFernFractal = initFernFractal;\n(window as any).initKochSnowflake = initKochSnowflake;\n(window as any).initPhoenixFractal = initPhoenixFractal;\n(window as any).initFractalPage = initFractalPage;\n\n// Expose fractal classes to the window object for direct use in HTML pages\nimport { JuliaFractal } from './src/fractals/mathematical/JuliaFractal';\nimport { BurningShipFractal } from './src/fractals/mathematical/BurningShipFractal';\nimport { NewtonFractal } from './src/fractals/mathematical/NewtonFractal';\nimport { LyapunovFractal } from './src/fractals/mathematical/LyapunovFractal';\nimport { PhoenixFractal } from './src/fractals/mathematical/PhoenixFractal';\n\n(window as any).MandelbrotFractal = MandelbrotFractal;\n(window as any).JuliaFractal = JuliaFractal;\n(window as any).BurningShipFractal = BurningShipFractal;\n(window as any).NewtonFractal = NewtonFractal;\n(window as any).LyapunovFractal = LyapunovFractal;\n(window as any).KochSnowflakeFractal = KochSnowflakeFractal;\n(window as any).PhoenixFractal = PhoenixFractal;\n(window as any).AdjacentRestrictionFractal = AdjacentRestrictionFractal;\n\n// Wait for DOM to be fully loaded before initializing\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM fully loaded, initializing dashboard...');\n    \n    // Try initializing particles\n    try {\n        initParticles();\n    } catch (e) {\n        console.error('Error initializing particles:', e);\n    }\n    \n    // Initialize the dashboard with all fractal modules\n    initDashboard();\n    \n    console.log('Dashboard initialization triggered');\n}); ","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./main.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./components.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","/**\r\n * Dashboard Module - Main container for the fractal dashboard \r\n */\r\n\r\nimport { createFractalSection } from './FractalSection';\r\nimport { initChaosGameFractals } from '../fractals/chaos-game/ChaosGameModule';\r\nimport { initMathFractals } from '../fractals/mathematical/MathFractalModule';\r\n\r\n/**\r\n * Initialize the dashboard with all fractal sections\r\n */\r\nexport function initDashboard(): void {\r\n    console.log('Initializing dashboard...');\r\n    \r\n    // Create the main dashboard structure\r\n    createHeader();\r\n    console.log('Header created');\r\n    \r\n    const chaosGameContainer = createFractalSection('Chaos Game Fractals');\r\n    console.log('Chaos Game section container created');\r\n    \r\n    const mathFractalContainer = createFractalSection('Complex Mathematical Fractals');\r\n    console.log('Math Fractal section container created');\r\n    \r\n    createFooter();\r\n    console.log('Footer created');\r\n\r\n    // Create decorative elements\r\n    createGridOverlay();\r\n    createCornerDecorations();\r\n    console.log('Decorations created');\r\n    \r\n    // Initialize the fractal sections\r\n    console.log('Initializing Chaos Game fractals...');\r\n    initChaosGameFractals(chaosGameContainer);\r\n    console.log('Chaos Game fractals initialized');\r\n    \r\n    console.log('Initializing Math fractals...');\r\n    initMathFractals(mathFractalContainer);\r\n    console.log('Math fractals initialized');\r\n    \r\n    console.log('Dashboard initialization complete');\r\n}\r\n\r\n/**\r\n * Creates the header element with title and subtitle\r\n */\r\nfunction createHeader(): void {\r\n    const dashboard = document.getElementById('dashboard');\r\n    if (!dashboard) return;\r\n    \r\n    const header = document.createElement('header');\r\n    \r\n    // Don't create particles container - already added in HTML\r\n    // const particles = document.createElement('div');\r\n    // particles.id = 'particles-js';\r\n    // header.appendChild(particles);\r\n    \r\n    // Create header content wrapper\r\n    const headerContent = document.createElement('div');\r\n    headerContent.className = 'header-content';\r\n    \r\n    // Create title with data-text attribute for glow effect\r\n    const title = document.createElement('h1');\r\n    const titleText = 'Fractal Explorer';\r\n    title.textContent = titleText;\r\n    title.setAttribute('data-text', titleText);\r\n    \r\n    // Create subtitle with modern styling\r\n    const subtitle = document.createElement('div');\r\n    subtitle.className = 'subtitle';\r\n    subtitle.innerHTML = 'Interactive visualization of <span class=\"highlight\">chaos game fractals</span> and <span class=\"highlight\">complex mathematical patterns</span>';\r\n    \r\n    // Create a decorative line under the title\r\n    const decorLine = document.createElement('div');\r\n    decorLine.className = 'header-decoration';\r\n    \r\n    headerContent.appendChild(title);\r\n    headerContent.appendChild(decorLine);\r\n    headerContent.appendChild(subtitle);\r\n    header.appendChild(headerContent);\r\n    \r\n    dashboard.appendChild(header);\r\n}\r\n\r\n/**\r\n * Creates the footer element\r\n */\r\nfunction createFooter(): void {\r\n    const dashboard = document.getElementById('dashboard');\r\n    if (!dashboard) return;\r\n    \r\n    const footer = document.createElement('div');\r\n    footer.className = 'footer';\r\n    \r\n    const footerLine = document.createElement('div');\r\n    footerLine.className = 'footer-line';\r\n    \r\n    const footerContent = document.createElement('div');\r\n    footerContent.className = 'footer-content';\r\n    \r\n    const footerText = document.createElement('div');\r\n    footerText.className = 'footer-text';\r\n    footerText.textContent = 'Fractal Explorer - Visualizing infinite complexity through mathematics';\r\n    \r\n    footerContent.appendChild(footerText);\r\n    footer.appendChild(footerLine);\r\n    footer.appendChild(footerContent);\r\n    \r\n    dashboard.appendChild(footer);\r\n}\r\n\r\n/**\r\n * Creates the grid overlay element (decorative background)\r\n */\r\nfunction createGridOverlay(): void {\r\n    const body = document.body;\r\n    \r\n    const gridOverlay = document.createElement('div');\r\n    gridOverlay.className = 'grid-overlay';\r\n    \r\n    body.appendChild(gridOverlay);\r\n}\r\n\r\n/**\r\n * Creates corner decoration elements\r\n */\r\nfunction createCornerDecorations(): void {\r\n    const body = document.body;\r\n    \r\n    const corners = [\r\n        'corner-top-left',\r\n        'corner-top-right',\r\n        'corner-bottom-left',\r\n        'corner-bottom-right'\r\n    ];\r\n    \r\n    corners.forEach(corner => {\r\n        const decoration = document.createElement('div');\r\n        decoration.className = `corner-decoration ${corner}`;\r\n        body.appendChild(decoration);\r\n    });\r\n} ","/**\r\n * FractalSection Module - Creates and manages a section of fractals\r\n */\r\n\r\n/**\r\n * Creates a new section for a group of fractals\r\n * @param title The title of the section\r\n * @returns The container element where fractal cards will be added\r\n */\r\nexport function createFractalSection(title: string): HTMLElement {\r\n    const dashboard = document.getElementById('dashboard');\r\n    if (!dashboard) {\r\n        throw new Error('Dashboard element not found');\r\n    }\r\n    \r\n    // Create section container\r\n    const section = document.createElement('div');\r\n    section.className = 'fractal-section';\r\n    \r\n    // Create container div with appropriate class\r\n    const container = document.createElement('div');\r\n    container.className = 'container';\r\n    section.appendChild(container);\r\n    \r\n    // Create section header\r\n    const sectionHeader = document.createElement('div');\r\n    sectionHeader.className = 'section-header';\r\n    container.appendChild(sectionHeader);\r\n    \r\n    // Create section title\r\n    const sectionTitle = document.createElement('h2');\r\n    sectionTitle.textContent = title;\r\n    sectionHeader.appendChild(sectionTitle);\r\n    \r\n    // Create grid for fractal cards\r\n    const grid = document.createElement('div');\r\n    grid.className = 'fractal-grid';\r\n    container.appendChild(grid);\r\n    \r\n    // Add to dashboard\r\n    dashboard.appendChild(section);\r\n    \r\n    // Log section creation for debugging\r\n    console.log(`Created fractal section: ${title}`);\r\n    \r\n    return grid;\r\n} ","/**\r\n * Chaos Game Module - Initializes and manages chaos game fractals\r\n */\r\n\r\nimport { TriangleFractal } from './TriangleFractal';\r\nimport { RestrictedSquareFractal } from './RestrictedSquareFractal';\r\n// import { DiamondFractal } from './DiamondFractal'; // Removed Diamond Fractal\r\nimport { NonRepeatSquareFractal } from './NonRepeatSquareFractal';\r\nimport { ModifiedSquareFractal } from './ModifiedSquareFractal';\r\nimport { AdjacentRestrictionFractal } from './AdjacentRestrictionFractal';\r\n// import { HexagonSpiralFractal } from './HexagonSpiralFractal';  // Removed HexagonSpiralFractal\r\nimport { SierpinskiCarpet } from './SierpinskiCarpet';\r\nimport { PentagonFractal } from './PentagonFractal';\r\nimport { FernFractal } from './FernFractal';\r\nimport { createFractalCard } from '../../components/FractalCardFactory';\r\nimport { createIterationsControl, createSliderControl, FractalControlConfig } from '../../components/FractalControlConfig';\r\n\r\n/**\r\n * Initialize all chaos game fractals\r\n * @param container The container element where fractal cards will be added\r\n */\r\nexport function initChaosGameFractals(container: HTMLElement): void {\r\n    // Triangle Fractal\r\n    initTriangleFractal(container);\r\n    \r\n    // Restricted Square Fractal\r\n    initRestrictedSquareFractal(container);\r\n    \r\n    // Non-Repeat Square Fractal\r\n    initNonRepeatSquareFractal(container);\r\n    \r\n    // Modified Square Fractal\r\n    initModifiedSquareFractal(container);\r\n    \r\n    // Adjacent Restriction Fractal\r\n    initAdjacentRestrictionFractal(container);\r\n    \r\n    // Hexagon Spiral Fractal (replacing Adjacency Mover) - Removed\r\n    \r\n    // Sierpinski Carpet Fractal\r\n    initSierpinskiCarpet(container);\r\n    \r\n    // Pentagon Fractal\r\n    initPentagonFractal(container);\r\n    \r\n    // Fern Fractal\r\n    initFernFractal(container);\r\n}\r\n\r\n/**\r\n * Initialize the Sierpinski Triangle fractal\r\n */\r\nfunction initTriangleFractal(container: HTMLElement): void {\r\n    const fractal = new TriangleFractal('triangle-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Sierpinski Triangle',\r\n        description: 'The classic triangle chaos game fractal where points move halfway to randomly chosen vertices.',\r\n        formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i is a randomly chosen vertex',\r\n        controlConfigs: controls,\r\n        canvasId: 'triangle-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Restricted Square fractal\r\n */\r\nfunction initRestrictedSquareFractal(container: HTMLElement): void {\r\n    const fractal = new RestrictedSquareFractal('restricted-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Restricted Square',\r\n        description: 'A square fractal with restrictions that prevent certain vertex combinations.',\r\n        formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i cannot be opposite to the previous vertex',\r\n        controlConfigs: controls,\r\n        canvasId: 'restricted-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Diamond fractal\r\n * @deprecated Diamond fractal has been removed from the dashboard\r\n */\r\nfunction initDiamondFractal(container: HTMLElement): void {\r\n    // Function body removed as this fractal has been removed from the dashboard\r\n}\r\n\r\n/**\r\n * Initialize the Non-Repeat Square fractal\r\n */\r\nfunction initNonRepeatSquareFractal(container: HTMLElement): void {\r\n    const fractal = new NonRepeatSquareFractal('non-repeat-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Non-Repeat Square',\r\n        description: 'A variant that prevents consecutive selection of the same vertex, creating more diverse patterns.',\r\n        formula: 'P_{n+1} = (P_n + V_i) / 2\\nwhere V_i is determined by a non-repeating dice roll',\r\n        controlConfigs: controls,\r\n        canvasId: 'non-repeat-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Modified Square fractal\r\n */\r\nfunction initModifiedSquareFractal(container: HTMLElement): void {\r\n    const fractal = new ModifiedSquareFractal('modified-square-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Modified Square',\r\n        description: 'A modified square fractal with altered vertex positions and selection rules.',\r\n        formula: 'P_{n+1} = (P_n + V_i) / 2\\nwith altered vertex positions and selection rules',\r\n        controlConfigs: controls,\r\n        canvasId: 'modified-square-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Adjacent Restriction fractal\r\n */\r\nfunction initAdjacentRestrictionFractal(container: HTMLElement): void {\r\n    const fractal = new AdjacentRestrictionFractal('adjacent-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value)),\r\n        createSliderControl({\r\n            id: 'contraction-ratio',\r\n            label: 'Contraction Ratio',\r\n            min: 0.1,\r\n            max: 0.9,\r\n            step: 0.05,\r\n            defaultValue: 0.5,\r\n            callback: (value) => fractal.setContractionRatio(value)\r\n        })\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Adjacent Restriction',\r\n        description: 'A fractal that restricts movement to non-adjacent vertices, creating distinct geometric patterns.',\r\n        formula: 'P_{n+1} = P_n + r * (V_i - P_n)\\nwhere V_i cannot be adjacent to the previously chosen vertex',\r\n        controlConfigs: controls,\r\n        canvasId: 'adjacent-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Sierpinski Carpet fractal\r\n */\r\nfunction initSierpinskiCarpet(container: HTMLElement): void {\r\n    const fractal = new SierpinskiCarpet('sierpinski-carpet-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Sierpinski Carpet',\r\n        description: 'A 2D generalization of the Sierpinski Triangle using 8 vertices arranged in a square pattern with a 2/3 contraction ratio.',\r\n        formula: 'P_{n+1} = P_n + 2/3(V_i - P_n)\\nwhere V_i is a randomly chosen vertex from the 8 vertices',\r\n        controlConfigs: controls,\r\n        canvasId: 'sierpinski-carpet-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Pentagon fractal\r\n */\r\nfunction initPentagonFractal(container: HTMLElement): void {\r\n    const fractal = new PentagonFractal('pentagon-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value)),\r\n        createSliderControl({\r\n            id: 'pentagon-ratio',\r\n            label: 'Contraction Ratio',\r\n            min: 0.4,\r\n            max: 0.8,\r\n            step: 0.01,\r\n            defaultValue: 0.618,\r\n            callback: (value) => fractal.setContractionRatio(value)\r\n        })\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Pentagon Fractal',\r\n        description: 'A pentagon-based chaos game with variable contraction ratios that create intricate patterns.',\r\n        formula: 'P_{n+1} = P_n + r_i(V_i - P_n)\\nwhere r_i varies based on vertex V_i',\r\n        controlConfigs: controls,\r\n        canvasId: 'pentagon-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize the Fern fractal\r\n */\r\nfunction initFernFractal(container: HTMLElement): void {\r\n    const fractal = new FernFractal('fern-canvas');\r\n    \r\n    const controls: FractalControlConfig[] = [\r\n        createIterationsControl((value) => fractal.setIterations(value))\r\n    ];\r\n    \r\n    createFractalCard({\r\n        title: 'Barnsley Fern',\r\n        description: 'A fern-like fractal generated using a chaos game with probabilistic affine transformations.',\r\n        formula: 'x_{n+1} = a_i·x_n + b_i·y_n + e_i\\ny_{n+1} = c_i·x_n + d_i·y_n + f_i\\nwhere i is chosen with probability p_i',\r\n        controlConfigs: controls,\r\n        canvasId: 'fern-canvas',\r\n        container: container,\r\n        fractal: fractal\r\n    });\r\n} ","/**\r\n * Navigation Service - Handles navigation between pages\r\n */\r\n\r\n/**\r\n * Navigate to a fractal editor page\r\n * @param fractalId The ID of the fractal to edit\r\n */\r\nexport function navigateToFractalEditor(fractalId: string): void {\r\n  // Special cases to fix URLs\r\n  if (fractalId === 'burning-ship-fractal') {\r\n    fractalId = 'burning-ship';\r\n  }\r\n  \r\n  // Fix for non-repeat square fractal\r\n  if (fractalId === 'non-repeat-square') {\r\n    fractalId = 'nonrepeat-square';\r\n  }\r\n  \r\n  const editorUrl = `pages/${fractalId}.html`;\r\n  window.open(editorUrl, '_blank');\r\n}\r\n\r\n/**\r\n * Get a URL for a fractal editor page\r\n * @param fractalId The ID of the fractal\r\n * @returns The URL to the fractal editor page\r\n */\r\nexport function getFractalEditorUrl(fractalId: string): string {\r\n  // Special cases to fix URLs\r\n  if (fractalId === 'burning-ship-fractal') {\r\n    fractalId = 'burning-ship';\r\n  }\r\n  \r\n  // Fix for non-repeat square fractal\r\n  if (fractalId === 'non-repeat-square-fractal') {\r\n    fractalId = 'nonrepeat-square';\r\n  }\r\n  \r\n  return `pages/${fractalId}.html`;\r\n} ","/**\n * Mathematical Fractals Module - Initializes and manages complex mathematical fractals\n */\n\nimport { MandelbrotFractal } from './MandelbrotFractal';\nimport { JuliaFractal } from './JuliaFractal';\nimport { BurningShipFractal } from './BurningShipFractal';\nimport { NewtonFractal } from './NewtonFractal';\nimport { LyapunovFractal } from './LyapunovFractal';\nimport { PhoenixFractal } from './PhoenixFractal';\nimport { SierpinskiTriangleFractal } from './SierpinskiTriangleFractal';\nimport { KochSnowflakeFractal } from './KochSnowflakeFractal';\nimport { createFractalCard } from '../../components/FractalCardFactory';\nimport { \n    createMaxIterationsControl, \n    createZoomControl, \n    createComplexParamControl, \n    FractalControlConfig \n} from '../../components/FractalControlConfig';\n\n/**\n * Initialize all mathematical fractals\n * @param container The container element where fractal cards will be added\n */\nexport function initMathFractals(container: HTMLElement): void {\n    // Mandelbrot Set\n    initMandelbrotFractal(container);\n    \n    // Julia Set\n    initJuliaFractal(container);\n    \n    // Burning Ship Fractal\n    initBurningShipFractal(container);\n    \n    // Newton Fractal\n    initNewtonFractal(container);\n    \n    // Lyapunov Fractal\n    initLyapunovFractal(container);\n    \n    // Phoenix Fractal\n    initPhoenixFractal(container);\n\n    // Sierpinski Triangle Fractal\n    initSierpinskiTriangleFractal(container);\n    \n    // Koch Snowflake Fractal\n    initKochSnowflakeFractal(container);\n}\n\n/**\n * Initialize the Mandelbrot Set fractal\n */\nfunction initMandelbrotFractal(container: HTMLElement): void {\n    const fractal = new MandelbrotFractal('mandelbrot-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        createMaxIterationsControl((value) => fractal.setMaxIterations(value)),\n        createZoomControl((value) => fractal.setZoom(value))\n    ];\n    \n    createFractalCard({\n        title: 'Mandelbrot Set',\n        description: 'The famous Mandelbrot set is formed by iterating z = z² + c and observing which complex values of c cause the sequence to remain bounded.',\n        formula: 'z_{n+1} = z_n^2 + c\\nz_0 = 0\\nSet contains c where |z_n| remains bounded as n→∞',\n        controlConfigs: controls,\n        canvasId: 'mandelbrot-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Julia Set fractal\n */\nfunction initJuliaFractal(container: HTMLElement): void {\n    const fractal = new JuliaFractal('julia-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        createComplexParamControl('real', 'Real Component', -0.7, \n            (value) => fractal.setParameters(value, parseFloat(\n                (document.getElementById('julia-canvas-imag') as HTMLInputElement)?.value || '0.27'\n            ))\n        ),\n        createComplexParamControl('imag', 'Imaginary Component', 0.27, \n            (value) => fractal.setParameters(parseFloat(\n                (document.getElementById('julia-canvas-real') as HTMLInputElement)?.value || '-0.7'\n            ), value)\n        )\n    ];\n    \n    createFractalCard({\n        title: 'Julia Set',\n        description: 'Julia sets are related to the Mandelbrot set, but with a fixed complex parameter. Different parameters create wildly different patterns.',\n        formula: 'z_{n+1} = z_n^2 + c\\nwhere c is fixed and z_0 is the point being tested',\n        controlConfigs: controls,\n        canvasId: 'julia-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Burning Ship fractal\n */\nfunction initBurningShipFractal(container: HTMLElement): void {\n    const fractal = new BurningShipFractal('burning-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        createMaxIterationsControl((value) => fractal.setMaxIterations(value)),\n        createZoomControl((value) => fractal.setZoom(value))\n    ];\n    \n    createFractalCard({\n        title: 'Burning Ship Fractal',\n        description: 'The Burning Ship fractal modifies the Mandelbrot formula by taking the absolute value of real and imaginary components before squaring.',\n        formula: 'z_{n+1} = (|Re(z_n)| + i|Im(z_n)|)^2 + c\\nz_0 = 0',\n        controlConfigs: controls,\n        canvasId: 'burning-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Newton fractal\n */\nfunction initNewtonFractal(container: HTMLElement): void {\n    const fractal = new NewtonFractal('newton-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        {\n            id: 'power',\n            label: 'Polynomial Power',\n            min: 3,\n            max: 10,\n            step: 1,\n            defaultValue: 3,\n            type: 'range',\n            onChange: (value) => fractal.setPower(value)\n        },\n        createMaxIterationsControl((value) => fractal.setMaxIterations(value))\n    ];\n    \n    createFractalCard({\n        title: 'Newton Fractal',\n        description: 'Visualizes Newton\\'s method for finding roots of complex polynomials, with colors representing which root the algorithm converges to.',\n        formula: 'z_{n+1} = z_n - f(z_n)/f\\'(z_n)\\nwhere f(z) = z^n - 1',\n        controlConfigs: controls,\n        canvasId: 'newton-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Lyapunov fractal\n */\nfunction initLyapunovFractal(container: HTMLElement): void {\n    const fractal = new LyapunovFractal('lyapunov-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        {\n            id: 'sequence',\n            label: 'Sequence',\n            type: 'text' as any,\n            min: 0,\n            max: 0,\n            defaultValue: 'AB',\n            onChange: (value) => fractal.setSequence(value)\n        },\n        createMaxIterationsControl((value) => fractal.setMaxIterations(value))\n    ];\n    \n    createFractalCard({\n        title: 'Lyapunov Fractal',\n        description: 'Maps the stability of a dynamical system with regions of chaos (positive exponents) and stability (negative exponents).',\n        formula: 'x_{n+1} = r·x_n·(1-x_n)\\nLyapunov exponent: λ = lim_{n→∞} (1/n)∑ln|r(1-2x_k)|',\n        controlConfigs: controls,\n        canvasId: 'lyapunov-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Phoenix fractal\n */\nfunction initPhoenixFractal(container: HTMLElement): void {\n    const fractal = new PhoenixFractal('phoenix-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        {\n            id: 'p',\n            label: 'Parameter P',\n            min: -1,\n            max: 1,\n            step: 0.01,\n            defaultValue: 0.56,\n            type: 'range',\n            onChange: (value) => fractal.setParameter(value)\n        },\n        createMaxIterationsControl((value) => fractal.setMaxIterations(value))\n    ];\n    \n    createFractalCard({\n        title: 'Phoenix Fractal',\n        description: 'A generalization of the Mandelbrot set that incorporates previous iteration values, creating flame-like patterns.',\n        formula: 'z_{n+1} = z_n^2 + c + p·z_{n-1}\\nwhere p is a complex parameter',\n        controlConfigs: controls,\n        canvasId: 'phoenix-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Sierpinski Triangle fractal\n */\nfunction initSierpinskiTriangleFractal(container: HTMLElement): void {\n    const fractal = new SierpinskiTriangleFractal('sierpinski-math-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        {\n            id: 'depth',\n            label: 'Recursion Depth',\n            min: 1,\n            max: 9,\n            step: 1,\n            defaultValue: 6,\n            type: 'range',\n            onChange: (value) => fractal.setDepth(value)\n        },\n        createZoomControl((value) => fractal.setZoom(value))\n    ];\n    \n    createFractalCard({\n        title: 'Sierpinski Triangle',\n        description: 'A deterministic implementation of the Sierpinski Triangle that uses recursive subdivision rather than the chaos game algorithm.',\n        formula: 'Recursive subdivision: Begin with an equilateral triangle, divide into 4 equal triangles, remove center triangle, repeat for remaining triangles.',\n        controlConfigs: controls,\n        canvasId: 'sierpinski-math-canvas',\n        container: container,\n        fractal: fractal\n    });\n}\n\n/**\n * Initialize the Koch Snowflake fractal\n */\nfunction initKochSnowflakeFractal(container: HTMLElement): void {\n    const fractal = new KochSnowflakeFractal('koch-math-canvas');\n    \n    const controls: FractalControlConfig[] = [\n        {\n            id: 'depth',\n            label: 'Iterations',\n            min: 0,\n            max: 6,\n            step: 1,\n            defaultValue: 4,\n            type: 'range',\n            onChange: (value) => fractal.setMaxIterations(value)\n        },\n        {\n            id: 'size',\n            label: 'Size',\n            min: 50,\n            max: 400,\n            step: 10,\n            defaultValue: 300,\n            type: 'range',\n            onChange: (value) => fractal.setSize(value)\n        },\n        createZoomControl((value) => fractal.setZoom(value))\n    ];\n    \n    createFractalCard({\n        title: 'Koch Snowflake',\n        description: 'A classic fractal curve that starts with an equilateral triangle and recursively replaces the middle third of each line segment with a triangular bump.',\n        formula: 'Recursive geometric construction: Begin with a triangle, replace middle third of each edge with an equilateral triangle, repeat for all new edges.',\n        controlConfigs: controls,\n        canvasId: 'koch-math-canvas',\n        container: container,\n        fractal: fractal\n    });\n} ","import { MathFractalBase } from './MathFractalBase';\nimport { Complex } from '../Complex';\nimport { FractalInfo } from '../FractalBase';\n\n/**\n * Implementation of the Sierpinski Triangle fractal using a deterministic approach\n */\nexport class SierpinskiTriangleFractal extends MathFractalBase {\n    private depth: number = 6;\n    \n    /**\n     * Constructor for the Sierpinski Triangle fractal\n     * \n     * @param canvasId - The ID of the canvas element to render on\n     * @param maxIterations - The maximum depth of the recursion\n     */\n    constructor(canvasId: string, maxDepth: number = 6) {\n        super(canvasId, maxDepth);\n        this.depth = maxDepth;\n        this.zoom = 0.9; // Default zoom level\n    }\n    \n    /**\n     * Sets the depth for the Sierpinski Triangle\n     */\n    public setDepth(depth: number): void {\n        this.depth = depth;\n        this.generate();\n    }\n    \n    /**\n     * Helper method to draw a filled triangle\n     */\n    private drawTriangle(p1: [number, number], p2: [number, number], p3: [number, number], fillColor: string): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(p1[0], p1[1]);\n        this.ctx.lineTo(p2[0], p2[1]);\n        this.ctx.lineTo(p3[0], p3[1]);\n        this.ctx.closePath();\n        this.ctx.fillStyle = fillColor;\n        this.ctx.fill();\n    }\n    \n    /**\n     * Calculates the midpoint between two points\n     */\n    private midpoint(p1: [number, number], p2: [number, number]): [number, number] {\n        return [\n            (p1[0] + p2[0]) / 2,\n            (p1[1] + p2[1]) / 2\n        ];\n    }\n    \n    /**\n     * Recursively draws the Sierpinski triangle\n     */\n    private sierpinski(p1: [number, number], p2: [number, number], p3: [number, number], depth: number): void {\n        if (depth === 0) {\n            // Generate a color based on position for visual appeal\n            const hue = (p1[0] * 0.7 + p1[1] * 0.3) % 360;\n            const color = `hsl(${hue}, 100%, 50%)`;\n            this.drawTriangle(p1, p2, p3, color);\n            return;\n        }\n        \n        const p12 = this.midpoint(p1, p2);\n        const p23 = this.midpoint(p2, p3);\n        const p31 = this.midpoint(p3, p1);\n        \n        // Recursively draw three smaller triangles\n        this.sierpinski(p1, p12, p31, depth - 1);\n        this.sierpinski(p12, p2, p23, depth - 1);\n        this.sierpinski(p31, p23, p3, depth - 1);\n    }\n    \n    /**\n     * Generates the Sierpinski Triangle fractal\n     */\n    public generate(): void {\n        this.clear();\n        \n        if (!this.canvas || !this.ctx) {\n            this.initialize();\n        }\n        \n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        \n        // Calculate the size based on zoom\n        const size = Math.min(width, height) * 0.85 * this.zoom;\n        \n        // Calculate the vertices of the main triangle\n        // Centered in the canvas\n        const centerX = width / 2;\n        const centerY = height / 2;\n        const halfSize = size / 2;\n        const height30 = size * Math.sin(Math.PI / 3); // Height of equilateral triangle\n        \n        const vertices: [number, number][] = [\n            [centerX, centerY - height30 / 1.5], // Top vertex\n            [centerX - halfSize, centerY + height30 / 3], // Bottom left\n            [centerX + halfSize, centerY + height30 / 3]  // Bottom right\n        ];\n        \n        // Draw the Sierpinski triangle recursively\n        this.sierpinski(vertices[0], vertices[1], vertices[2], this.depth);\n    }\n    \n    /**\n     * Returns information about the Sierpinski Triangle fractal\n     */\n    public getInfo(): FractalInfo {\n        return {\n            title: 'Sierpinski Triangle',\n            description: 'The Sierpinski Triangle is a fractal pattern created by recursively removing the center triangle from equilateral triangles.',\n            formula: 'Recursive subdivision: Begin with an equilateral triangle, divide into 4 equal triangles, remove center triangle, repeat for remaining triangles.'\n        };\n    }\n} "],"sourceRoot":""}